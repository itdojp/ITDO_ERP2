# OpenTelemetry Collector Configuration for ITDO ERP
mode: daemonset

# Image configuration
image:
  repository: otel/opentelemetry-collector-k8s
  tag: 0.89.0
  pullPolicy: IfNotPresent

# Command override
command:
  name: otelcol-k8s
  args: []

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod security context
podSecurityContext:
  fsGroup: 10001
  runAsGroup: 10001
  runAsNonRoot: true
  runAsUser: 10001

# Security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsUser: 10001
  runAsGroup: 10001
  runAsNonRoot: true

# Resources
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Node selector, tolerations, and affinity
nodeSelector: {}

tolerations:
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule

affinity: {}

# Ports configuration
ports:
  # OTLP receivers
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
    
  # Jaeger receivers  
  jaeger-compact:
    enabled: true
    containerPort: 6831
    servicePort: 6831
    hostPort: 6831
    protocol: UDP
  jaeger-thrift:
    enabled: true
    containerPort: 14268
    servicePort: 14268
    hostPort: 14268
    protocol: TCP
  jaeger-grpc:
    enabled: true
    containerPort: 14250
    servicePort: 14250
    hostPort: 14250
    protocol: TCP
    
  # Zipkin receiver
  zipkin:
    enabled: true
    containerPort: 9411
    servicePort: 9411
    hostPort: 9411
    protocol: TCP
    
  # Prometheus metrics
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP

# Health check ports
healthCheck:
  enabled: true
  port: 13133

# Environment variables
env:
  - name: NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  - name: POD_NAMESPACE
    valueFrom:
      fieldRef:
        fieldPath: metadata.namespace
  - name: POD_IP
    valueFrom:
      fieldRef:
        fieldPath: status.podIP
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: "k8s.cluster.name=itdo-erp-k8s,k8s.node.name=$(NODE_NAME),k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(POD_NAMESPACE),k8s.pod.ip=$(POD_IP)"

# OpenTelemetry Collector configuration
config:
  receivers:
    # OTLP receivers
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
          max_recv_msg_size: 4194304
        http:
          endpoint: 0.0.0.0:4318
          cors:
            allowed_origins:
              - "https://*.itdo-erp.com"
            allowed_headers:
              - "*"
              
    # Jaeger receivers
    jaeger:
      protocols:
        grpc:
          endpoint: 0.0.0.0:14250
        thrift_compact:
          endpoint: 0.0.0.0:6831
        thrift_http:
          endpoint: 0.0.0.0:14268
          
    # Zipkin receiver
    zipkin:
      endpoint: 0.0.0.0:9411
      
    # Kubernetes cluster receiver
    k8s_cluster:
      auth_type: serviceAccount
      node: ${NODE_NAME}
      collection_interval: 30s
      
    # Kubernetes events receiver
    k8s_events:
      auth_type: serviceAccount
      
    # Host metrics receiver
    hostmetrics:
      collection_interval: 30s
      scrapers:
        cpu: {}
        memory: {}
        disk: {}
        filesystem: {}
        network: {}
        
    # Container receiver (Docker stats)
    docker_stats:
      endpoint: unix:///var/run/docker.sock
      collection_interval: 30s
      timeout: 10s

  processors:
    # Batch processor for performance
    batch:
      timeout: 1s
      send_batch_size: 1024
      send_batch_max_size: 2048
      
    # Memory limiter
    memory_limiter:
      limit_mib: 1500
      spike_limit_mib: 200
      check_interval: 5s
      
    # Resource processor to add metadata
    resource:
      attributes:
        - key: cluster.name
          value: itdo-erp-k8s
          action: upsert
        - key: environment
          value: production
          action: upsert
          
    # Kubernetes attributes processor
    k8sattributes:
      auth_type: serviceAccount
      passthrough: false
      filter:
        node_from_env_var: NODE_NAME
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
        labels:
          - tag_name: app.label.component
            key: app.kubernetes.io/component
            from: pod
          - tag_name: app.label.version
            key: app.kubernetes.io/version
            from: pod
        annotations:
          - tag_name: app.annotation.version
            key: version
            from: pod
            
    # Probability sampler (production optimization)
    probabilistic_sampler:
      hash_seed: 22
      sampling_percentage: 10
      
    # Tail sampling for intelligent sampling
    tail_sampling:
      decision_wait: 30s
      num_traces: 100000
      expected_new_traces_per_sec: 1000
      policies:
        - name: error-sampling
          type: status_code
          status_code: {status_codes: [ERROR]}
        - name: latency-sampling
          type: latency
          latency: {threshold_ms: 1000}
        - name: probabilistic-sampling
          type: probabilistic
          probabilistic: {sampling_percentage: 10}

  exporters:
    # Jaeger exporter
    jaeger:
      endpoint: jaeger-collector.tracing.svc.cluster.local:14250
      tls:
        insecure: true
      retry_on_failure:
        enabled: true
        initial_interval: 1s
        max_interval: 30s
        max_elapsed_time: 300s
      sending_queue:
        enabled: true
        num_consumers: 10
        queue_size: 5000
        
    # Prometheus exporter for metrics
    prometheus:
      endpoint: "0.0.0.0:8889"
      const_labels:
        cluster: itdo-erp-k8s
        environment: production
      metric_relabeling:
        - source_labels: [__name__]
          regex: '.*grpc_io.*'
          action: drop
          
    # Elasticsearch exporter for additional trace data
    elasticsearch:
      endpoints: 
        - https://elasticsearch.logging.svc.cluster.local:9200
      index: otel-traces
      http:
        auth:
          authenticator: basicauth
        basicauth:
          username: elastic
          password: elastic-production-password
        tls:
          insecure_skip_verify: true
      mapping:
        mode: ecs
      timeout: 30s
      retry_on_failure:
        enabled: true
        initial_interval: 1s
        max_interval: 30s
        max_elapsed_time: 300s

  extensions:
    # Health check extension
    health_check:
      endpoint: 0.0.0.0:13133
      
    # pprof extension for debugging
    pprof:
      endpoint: 0.0.0.0:1777
      
    # zPages extension
    zpages:
      endpoint: 0.0.0.0:55679

  service:
    # Extensions
    extensions: [health_check, pprof, zpages]
    
    # Telemetry
    telemetry:
      logs:
        level: info
      metrics:
        level: basic
        address: 0.0.0.0:8888
        
    # Pipelines
    pipelines:
      # Traces pipeline
      traces:
        receivers: [otlp, jaeger, zipkin]
        processors: [memory_limiter, k8sattributes, resource, probabilistic_sampler, batch]
        exporters: [jaeger]
        
      # Metrics pipeline
      metrics:
        receivers: [otlp, k8s_cluster, hostmetrics]
        processors: [memory_limiter, k8sattributes, resource, batch]
        exporters: [prometheus]
        
      # Logs pipeline (for structured application logs)
      logs:
        receivers: [otlp]
        processors: [memory_limiter, k8sattributes, resource, batch]
        exporters: [elasticsearch]

# Extra volumes
extraVolumes:
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
      type: Socket

# Extra volume mounts
extraVolumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  - name: varlibdockercontainers
    mountPath: /var/lib/docker/containers
    readOnly: true
  - name: dockersock
    mountPath: /var/run/docker.sock
    readOnly: true

# Service configuration
service:
  enabled: true
  type: ClusterIP
  
# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels: {}
  interval: 30s
  scrapeTimeout: 10s

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8888"
  prometheus.io/path: "/metrics"

# Pod labels
podLabels: {}

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  maxUnavailable: 50%

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 15
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /
    port: 13133
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Network policy
networkPolicy:
  enabled: true

# Name overrides
nameOverride: ""
fullnameOverride: ""

# Priority class
priorityClassName: ""

# Horizontal Pod Autoscaler (for deployment mode)
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional configuration
presets:
  # Enable Kubernetes cluster monitoring
  kubernetesClusterMetrics:
    enabled: true
  # Enable Kubernetes events monitoring  
  kubernetesEvents:
    enabled: true
  # Enable host metrics collection
  hostMetrics:
    enabled: true
  # Enable Kubernetes attributes
  kubernetesAttributes:
    enabled: true