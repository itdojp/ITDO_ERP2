# Elasticsearch Configuration for ITDO ERP Logging
clusterName: "itdo-erp-elasticsearch"
nodeGroup: "master"

# The service that non master groups will try to connect to when joining the cluster
# This should be set to clusterName + "-" + nodeGroup for your master group
masterService: ""

# Elasticsearch roles that will be applied to this nodeGroup
# These will be set as environment variables. E.g. node.master=true
roles:
  master: "true"
  ingest: "true"
  data: "true"
  remote_cluster_client: "true"
  ml: "false"

replicas: 3
minimumMasterNodes: 2

esMajorVersion: ""

# Allows you to add any config files in /usr/share/elasticsearch/config/
# such as elasticsearch.yml and log4j2.properties
esConfig:
  elasticsearch.yml: |
    cluster.name: "itdo-erp-elasticsearch"
    network.host: 0.0.0.0
    
    # Security settings
    xpack.security.enabled: true
    xpack.security.transport.ssl.enabled: true
    xpack.security.transport.ssl.verification_mode: certificate
    xpack.security.transport.ssl.client_authentication: required
    xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12
    xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12
    
    # HTTP SSL
    xpack.security.http.ssl.enabled: true
    xpack.security.http.ssl.keystore.path: certs/elastic-certificates.p12
    
    # Monitoring
    xpack.monitoring.collection.enabled: true
    
    # Index lifecycle management
    xpack.ilm.enabled: true
    
    # Machine learning (disabled for cost optimization)
    xpack.ml.enabled: false
    
    # ITDO ERP specific settings
    cluster.max_shards_per_node: 10000
    action.destructive_requires_name: true
    cluster.routing.allocation.disk.threshold_enabled: true
    cluster.routing.allocation.disk.watermark.flood_stage: 95%
    cluster.routing.allocation.disk.watermark.high: 90%
    cluster.routing.allocation.disk.watermark.low: 85%
    
    # Performance optimization
    indices.memory.index_buffer_size: 30%
    thread_pool.write.queue_size: 1000
    
    # Index templates for ITDO ERP
    index.number_of_shards: 1
    index.number_of_replicas: 1
    index.refresh_interval: 30s

createCert: true

esJavaOpts: "-Xmx1g -Xms1g"

resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "2000m"
    memory: "2Gi"

initResources: {}

networkHost: "0.0.0.0"

volumeClaimTemplate:
  accessModes: ["ReadWriteOnce"]
  storageClassName: "gp3"
  resources:
    requests:
      storage: 50Gi

rbac:
  create: true
  serviceAccountAnnotations: {}
  serviceAccountName: ""
  automountServiceAccountToken: true

podSecurityPolicy:
  create: false
  name: ""
  spec:
    privileged: true
    fsGroup:
      rule: RunAsAny
    runAsUser:
      rule: RunAsAny
    seLinux:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    volumes:
      - secret
      - configMap
      - persistentVolumeClaim
      - emptyDir

persistence:
  enabled: true
  labels:
    enabled: false
  annotations: {}

extraEnvs:
  - name: ELASTIC_PASSWORD
    valueFrom:
      secretKeyRef:
        name: elasticsearch-credentials
        key: password
  - name: ELASTIC_USERNAME
    value: "elastic"

envFrom: []

secretMounts:
  - name: elastic-certificates
    secretName: elastic-certificates
    path: /usr/share/elasticsearch/config/certs
    defaultMode: 0755

hostAliases: []

image: "docker.elastic.co/elasticsearch/elasticsearch"
imageTag: "8.11.0"
imagePullPolicy: "IfNotPresent"

podAnnotations:
  co.elastic.logs/enabled: "false"

labels: {}

esJvmOptions: {}

nodeSelector: {}

tolerations: []

affinity: {}

# Enabling this will publicly expose your Elasticsearch instance.
# Only enable this if you have security enabled on your cluster
ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: elasticsearch-basic-auth
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: elasticsearch.itdo-erp.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: elasticsearch-tls
      hosts:
        - elasticsearch.itdo-erp.com

nameOverride: ""
fullnameOverride: ""
healthNameOverride: ""

lifecycle: {}

sysctlVmMaxMapCount: 262144

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 3
  timeoutSeconds: 5

# https://www.elastic.co/guide/en/elasticsearch/reference/7.17/cluster-health.html#request-params wait_for_status
clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"

## Use an alternate scheduler.
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""

imagePullSecrets: []
nodeAffinity: {}

# Hard means that by default pods will only be scheduled if there are enough nodes for them
# and that they will never end up on the same node. Setting this to soft will do this "best effort"
antiAffinity: "hard"

# This is the PodAntiAffinity, you can change to "soft" if you prefers
antiAffinityTopologyKey: "kubernetes.io/hostname"

# Hard means that by default pods will only be scheduled if there are enough nodes for them
# and that they will never end up on the same node. Setting this to soft will do this "best effort"
topologySpreadConstraints: []

# Pod disruption budget
maxUnavailable: 1

# Custom priorityClassName
priorityClassName: ""

# Override default tests
tests:
  enabled: true

# Custom startup probe
startupProbe:
  initialDelaySeconds: 90
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1