# CC03 v62.0 - 7日間集中インフラスプリント
# Day 1: 本番対応Docker Compose構成

version: '3.8'

name: itdo-erp-v62-production

services:
  # リバースプロキシ & SSL終端
  nginx:
    image: docker.io/library/nginx:1.25-alpine
    container_name: itdo-nginx-v62
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - web-tier
      - app-tier
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # フロントエンド
  frontend:
    image: itdo-erp/frontend:v62-production
    container_name: itdo-frontend-v62
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
      target: production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.${DOMAIN_NAME:-localhost}
      - VITE_WS_URL=wss://api.${DOMAIN_NAME:-localhost}/ws
    networks:
      - web-tier
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'

  # バックエンドAPI
  backend:
    image: itdo-erp/backend:v62-production
    container_name: itdo-backend-v62
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
      target: production
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - LOG_LEVEL=INFO
      - WORKERS=4
    networks:
      - app-tier
      - data-tier
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
    volumes:
      - app-logs:/app/logs

  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: itdo-postgres-v62
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - data-tier
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf

  # Redis キャッシュ
  redis:
    image: redis:7-alpine
    container_name: itdo-redis-v62
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data
      - redis-logs:/var/log/redis
    networks:
      - data-tier
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Keycloak 認証サーバー
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: itdo-keycloak-v62
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=h2-file
      - KC_DB_URL_DATABASE=/opt/keycloak/data/keycloakdb
      - KC_HOSTNAME=${DOMAIN_NAME:-localhost}
      - KC_HTTP_ENABLED=true
      - KC_PROXY=edge
      - KC_LOG_LEVEL=INFO
    networks:
      - app-tier
      - data-tier
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command:
      - start
      - --optimized
      - --import-realm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    volumes:
      - keycloak-data:/opt/keycloak/data

  # Prometheus 監視
  prometheus:
    image: docker.io/prom/prometheus:v2.46.0
    container_name: itdo-prometheus-v62
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monitoring
      - app-tier
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Grafana ダッシュボード
  grafana:
    image: docker.io/grafana/grafana:10.1.0
    container_name: itdo-grafana-v62
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Alertmanager アラート管理
  alertmanager:
    image: docker.io/prom/alertmanager:v0.26.0
    container_name: itdo-alertmanager-v62
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    networks:
      - monitoring
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # cAdvisor コンテナ監視
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: itdo-cadvisor-v62
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # バックアップサービス
  backup:
    image: postgres:15-alpine
    container_name: itdo-backup-v62
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - backup-data:/backup
      - ./scripts/backup-cron.sh:/backup-cron.sh:ro
    networks:
      - data-tier
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: ["/backup-cron.sh"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

networks:
  web-tier:
    driver: bridge
    external: false
  app-tier:
    driver: bridge
    internal: true
  data-tier:
    driver: bridge
    internal: true
  monitoring:
    driver: bridge
    internal: true

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local
  keycloak-data:
    driver: local
  backup-data:
    driver: local
  nginx-logs:
    driver: local
  postgres-logs:
    driver: local
  redis-logs:
    driver: local
  app-logs:
    driver: local