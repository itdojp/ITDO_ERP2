---
# Redis Sentinel High Availability Cluster
# CC03 v68.0 Day 2: Automatic Failover and Leader Election

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-sentinel
  namespace: itdo-erp-production
  labels:
    app: redis-sentinel
    component: cluster-management
    tier: cache
    version: "7.2.3"
spec:
  serviceName: redis-sentinel-service
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
        component: cluster-management
        tier: cache
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: sentinel-init
        image: redis:7.2.3-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Initialize Sentinel configuration
          cp /etc/redis-sentinel/sentinel.conf /data/sentinel.conf
          
          # Replace placeholders
          sed -i "s/REDIS_MASTER_SERVICE/redis-master-service/g" /data/sentinel.conf
          sed -i "s/REDIS_PASSWORD/${REDIS_PASSWORD}/g" /data/sentinel.conf
          sed -i "s/SENTINEL_PASSWORD/${SENTINEL_PASSWORD}/g" /data/sentinel.conf
          
          # Set proper permissions
          chown redis:redis /data/sentinel.conf
          chmod 640 /data/sentinel.conf
          
          echo "Sentinel configuration initialized"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: password
        - name: SENTINEL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: sentinel_password
        volumeMounts:
        - name: sentinel-config-template
          mountPath: /etc/redis-sentinel
        - name: sentinel-data
          mountPath: /data
      containers:
      - name: redis-sentinel
        image: redis:7.2.3-alpine
        command:
        - redis-sentinel
        - /data/sentinel.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: password
        - name: SENTINEL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: sentinel_password
        ports:
        - name: sentinel
          containerPort: 26379
          protocol: TCP
        volumeMounts:
        - name: sentinel-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - --no-auth-warning
            - -a
            - $(SENTINEL_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - --no-auth-warning
            - -a
            - $(SENTINEL_PASSWORD)
            - sentinel
            - masters
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: sentinel-config-template
        configMap:
          name: redis-sentinel-config
          defaultMode: 0644
  volumeClaimTemplates:
  - metadata:
      name: sentinel-data
      labels:
        app: redis-sentinel
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 1Gi

---
# Redis Sentinel Service
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel-service
  namespace: itdo-erp-production
  labels:
    app: redis-sentinel
    component: cluster-management
spec:
  type: ClusterIP
  ports:
  - name: sentinel
    port: 26379
    targetPort: 26379
    protocol: TCP
  selector:
    app: redis-sentinel

---
# Redis Sentinel Headless Service
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel-headless
  namespace: itdo-erp-production
  labels:
    app: redis-sentinel
    component: headless
spec:
  clusterIP: None
  ports:
  - name: sentinel
    port: 26379
    targetPort: 26379
    protocol: TCP
  selector:
    app: redis-sentinel

---
# Redis Sentinel Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  namespace: itdo-erp-production
  labels:
    app: redis-sentinel
    component: configuration
data:
  sentinel.conf: |
    # Basic Sentinel Configuration
    port 26379
    bind 0.0.0.0
    
    # Sentinel Authentication
    requirepass SENTINEL_PASSWORD
    
    # Master Configuration
    sentinel monitor redis-master REDIS_MASTER_SERVICE 6379 2
    sentinel auth-pass redis-master REDIS_PASSWORD
    
    # Failover Configuration
    sentinel down-after-milliseconds redis-master 5000
    sentinel parallel-syncs redis-master 1
    sentinel failover-timeout redis-master 60000
    
    # Deny dangerous commands
    sentinel deny-scripts-reconfig yes
    
    # Logging
    loglevel notice
    logfile ""
    
    # Client timeouts
    sentinel resolve-hostnames yes
    sentinel announce-hostnames yes
    
    # Performance tuning
    tcp-keepalive 60
    
    # Notification scripts (placeholder for webhook integration)
    # sentinel notification-script redis-master /usr/local/bin/notify-failover.sh
    # sentinel client-reconfig-script redis-master /usr/local/bin/reconfig-clients.sh

---
# Redis Sentinel Monitoring and Health Check
apiVersion: batch/v1
kind: CronJob
metadata:
  name: redis-sentinel-health-check
  namespace: itdo-erp-production
  labels:
    app: redis-sentinel
    component: monitoring
spec:
  schedule: "*/2 * * * *"  # Every 2 minutes
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: sentinel-health-check
            image: redis:7.2.3-alpine
            env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secrets
                  key: password
            - name: SENTINEL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secrets
                  key: sentinel_password
            command:
            - /bin/sh
            - -c
            - |
              echo "$(date): Starting Redis Sentinel health check..."
              
              # Check Sentinel cluster health
              for i in 0 1 2; do
                sentinel_pod="redis-sentinel-${i}.redis-sentinel-headless"
                echo "Checking Sentinel: $sentinel_pod"
                
                if redis-cli -h $sentinel_pod -p 26379 --no-auth-warning -a $SENTINEL_PASSWORD ping | grep -q PONG; then
                  echo "Sentinel $sentinel_pod: HEALTHY"
                  
                  # Check master status
                  master_info=$(redis-cli -h $sentinel_pod -p 26379 --no-auth-warning -a $SENTINEL_PASSWORD sentinel masters)
                  echo "Master info from $sentinel_pod: $master_info"
                  
                  # Check replica count
                  replica_count=$(redis-cli -h $sentinel_pod -p 26379 --no-auth-warning -a $SENTINEL_PASSWORD sentinel replicas redis-master | grep -c "ip=")
                  echo "Replica count: $replica_count"
                  
                else
                  echo "Sentinel $sentinel_pod: UNHEALTHY"
                fi
              done
              
              # Check Redis master
              if redis-cli -h redis-master-service -p 6379 --no-auth-warning -a $REDIS_PASSWORD ping | grep -q PONG; then
                echo "Redis Master: HEALTHY"
                
                # Check replication info
                repl_info=$(redis-cli -h redis-master-service -p 6379 --no-auth-warning -a $REDIS_PASSWORD info replication)
                echo "Replication info: $repl_info"
              else
                echo "Redis Master: UNHEALTHY"
              fi
              
              # Check Redis replicas
              for i in 0 1; do
                replica_pod="redis-replica-${i}.redis-replica-service"
                if redis-cli -h $replica_pod -p 6379 --no-auth-warning -a $REDIS_PASSWORD ping | grep -q PONG; then
                  echo "Redis Replica $replica_pod: HEALTHY"
                else
                  echo "Redis Replica $replica_pod: UNHEALTHY"
                fi
              done
              
              echo "$(date): Health check completed"

---
# Redis Failover Test Job
apiVersion: batch/v1
kind: Job
metadata:
  name: redis-failover-test
  namespace: itdo-erp-production
  labels:
    app: redis-sentinel
    component: testing
  annotations:
    "helm.sh/hook": test
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: failover-test
        image: redis:7.2.3-alpine
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: password
        - name: SENTINEL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: sentinel_password
        command:
        - /bin/sh
        - -c
        - |
          echo "Starting Redis Sentinel failover test..."
          
          # Function to get current master from sentinel
          get_master() {
            redis-cli -h redis-sentinel-service -p 26379 --no-auth-warning -a $SENTINEL_PASSWORD \
              sentinel get-master-addr-by-name redis-master | head -1
          }
          
          # Initial master
          initial_master=$(get_master)
          echo "Initial master: $initial_master"
          
          # Test data write
          test_key="failover-test-$(date +%s)"
          test_value="test-value-$(date +%s)"
          
          echo "Writing test data: $test_key = $test_value"
          redis-cli -h $initial_master -p 6379 --no-auth-warning -a $REDIS_PASSWORD set $test_key $test_value
          
          # Verify write
          written_value=$(redis-cli -h $initial_master -p 6379 --no-auth-warning -a $REDIS_PASSWORD get $test_key)
          if [ "$written_value" = "$test_value" ]; then
            echo "✅ Test data written successfully"
          else
            echo "❌ Test data write failed"
            exit 1
          fi
          
          echo "✅ Failover test preparation completed"
          echo "Manual failover can be triggered with:"
          echo "redis-cli -h redis-sentinel-service -p 26379 --no-auth-warning -a \$SENTINEL_PASSWORD sentinel failover redis-master"

---
# Redis Connection Pool Service (for applications)
apiVersion: v1
kind: Service
metadata:
  name: redis-pool-service
  namespace: itdo-erp-production
  labels:
    app: redis
    component: connection-pool
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300
  selector:
    app: redis

---
# ServiceAccount for Redis Sentinel
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-sentinel-sa
  namespace: itdo-erp-production

---
# ClusterRole for Redis Sentinel
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: redis-sentinel-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

---
# ClusterRoleBinding for Redis Sentinel
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: redis-sentinel-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: redis-sentinel-role
subjects:
- kind: ServiceAccount
  name: redis-sentinel-sa
  namespace: itdo-erp-production

---
# PodDisruptionBudget for Redis High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-master-pdb
  namespace: itdo-erp-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: redis
      role: master

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-replica-pdb
  namespace: itdo-erp-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: redis
      role: replica

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-sentinel-pdb
  namespace: itdo-erp-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: redis-sentinel