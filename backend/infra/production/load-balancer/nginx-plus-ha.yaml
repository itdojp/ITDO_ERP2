---
# NGINX Plus High Availability Load Balancer
# CC03 v68.0 Day 3: Production Load Balancing Infrastructure

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nginx-plus-primary
  namespace: itdo-erp-production
  labels:
    app: nginx-plus
    role: primary
    tier: edge
    version: "1.25.3"
spec:
  serviceName: nginx-plus-primary-service
  replicas: 2
  selector:
    matchLabels:
      app: nginx-plus
      role: primary
  template:
    metadata:
      labels:
        app: nginx-plus
        role: primary
        tier: edge
    spec:
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      initContainers:
      - name: nginx-config-init
        image: nginx:1.25.3-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Initialize NGINX Plus configuration
          cp /etc/nginx-config-template/nginx.conf /etc/nginx/nginx.conf
          cp /etc/nginx-config-template/upstream.conf /etc/nginx/conf.d/upstream.conf
          cp /etc/nginx-config-template/ssl.conf /etc/nginx/conf.d/ssl.conf
          
          # Replace environment variables
          sed -i "s/BACKEND_SERVICE_1/itdo-erp-backend-service-1/g" /etc/nginx/conf.d/upstream.conf
          sed -i "s/BACKEND_SERVICE_2/itdo-erp-backend-service-2/g" /etc/nginx/conf.d/upstream.conf
          sed -i "s/POSTGRES_SERVICE/patroni-cluster-service/g" /etc/nginx/conf.d/upstream.conf
          sed -i "s/REDIS_SERVICE/redis-master-service/g" /etc/nginx/conf.d/upstream.conf
          
          # Set proper permissions
          chown -R nginx:nginx /etc/nginx/
          chmod -R 644 /etc/nginx/
          
          echo "NGINX Plus configuration initialized"
        volumeMounts:
        - name: nginx-config-template
          mountPath: /etc/nginx-config-template
        - name: nginx-config
          mountPath: /etc/nginx
      containers:
      - name: nginx-plus
        image: nginx:1.25.3-alpine
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        - name: admin
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9113
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
        - name: nginx-ssl-certs
          mountPath: /etc/nginx/ssl
        - name: nginx-logs
          mountPath: /var/log/nginx
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /nginx_status
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: nginx-config-template
        configMap:
          name: nginx-plus-config-template
      - name: nginx-ssl-certs
        secret:
          secretName: nginx-ssl-certificates
      - name: nginx-config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: nginx-logs
      labels:
        app: nginx-plus
        role: primary
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# NGINX Plus Secondary Load Balancer
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nginx-plus-secondary
  namespace: itdo-erp-production
  labels:
    app: nginx-plus
    role: secondary
    tier: edge
    version: "1.25.3"
spec:
  serviceName: nginx-plus-secondary-service
  replicas: 2
  selector:
    matchLabels:
      app: nginx-plus
      role: secondary
  template:
    metadata:
      labels:
        app: nginx-plus
        role: secondary
        tier: edge
    spec:
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      initContainers:
      - name: nginx-config-init
        image: nginx:1.25.3-alpine
        command:
        - /bin/sh
        - -c
        - |
          # Initialize NGINX Plus configuration for secondary
          cp /etc/nginx-config-template/nginx.conf /etc/nginx/nginx.conf
          cp /etc/nginx-config-template/upstream.conf /etc/nginx/conf.d/upstream.conf
          cp /etc/nginx-config-template/ssl.conf /etc/nginx/conf.d/ssl.conf
          
          # Configure as secondary with different priority
          sed -i "s/server_name primary/server_name secondary/g" /etc/nginx/nginx.conf
          sed -i "s/BACKUP_FLAG//g" /etc/nginx/conf.d/upstream.conf
          
          # Replace environment variables
          sed -i "s/BACKEND_SERVICE_1/itdo-erp-backend-service-1/g" /etc/nginx/conf.d/upstream.conf
          sed -i "s/BACKEND_SERVICE_2/itdo-erp-backend-service-2/g" /etc/nginx/conf.d/upstream.conf
          
          # Set proper permissions
          chown -R nginx:nginx /etc/nginx/
          chmod -R 644 /etc/nginx/
          
          echo "NGINX Plus secondary configuration initialized"
        volumeMounts:
        - name: nginx-config-template
          mountPath: /etc/nginx-config-template
        - name: nginx-config
          mountPath: /etc/nginx
      containers:
      - name: nginx-plus
        image: nginx:1.25.3-alpine
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        - name: admin
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9113
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
        - name: nginx-ssl-certs
          mountPath: /etc/nginx/ssl
        - name: nginx-logs
          mountPath: /var/log/nginx
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /nginx_status
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
      volumes:
      - name: nginx-config-template
        configMap:
          name: nginx-plus-config-template
      - name: nginx-ssl-certs
        secret:
          secretName: nginx-ssl-certificates
      - name: nginx-config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: nginx-logs
      labels:
        app: nginx-plus
        role: secondary
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# NGINX Plus Primary Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-plus-primary-service
  namespace: itdo-erp-production
  labels:
    app: nginx-plus
    role: primary
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  - name: admin
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: nginx-plus
    role: primary

---
# NGINX Plus Secondary Service  
apiVersion: v1
kind: Service
metadata:
  name: nginx-plus-secondary-service
  namespace: itdo-erp-production
  labels:
    app: nginx-plus
    role: secondary
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  - name: admin
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: nginx-plus
    role: secondary

---
# NGINX Plus Headless Service for Discovery
apiVersion: v1
kind: Service
metadata:
  name: nginx-plus-headless
  namespace: itdo-erp-production
  labels:
    app: nginx-plus
    component: headless
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: nginx-plus

---
# SSL Certificates Secret
apiVersion: v1
kind: Secret
metadata:
  name: nginx-ssl-certificates
  namespace: itdo-erp-production
type: kubernetes.io/tls
stringData:
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # Production SSL Certificate (placeholder - replace with actual certificate)
    # This should be replaced with actual SSL certificates for production use
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    # Production SSL Private Key (placeholder - replace with actual key)
    # This should be replaced with actual private key for production use
    -----END PRIVATE KEY-----
  ca.crt: |
    -----BEGIN CERTIFICATE-----
    # Certificate Authority (placeholder - replace with actual CA)
    -----END CERTIFICATE-----

---
# Network Policy for NGINX Plus Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx-plus-network-policy
  namespace: itdo-erp-production
spec:
  podSelector:
    matchLabels:
      app: nginx-plus
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # Allow from anywhere (public load balancer)
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9113
  egress:
  - to:
    - podSelector:
        matchLabels:
          tier: application
    ports:
    - protocol: TCP
      port: 8000
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: UDP
      port: 53

---
# PodDisruptionBudget for High Availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-plus-primary-pdb
  namespace: itdo-erp-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: nginx-plus
      role: primary

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-plus-secondary-pdb
  namespace: itdo-erp-production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: nginx-plus
      role: secondary