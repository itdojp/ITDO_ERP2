"""
Individual endpoint performance tests
Auto-generated by CC02 v38.0 Test Automation System
"""

import time

import pytest
from fastapi.testclient import TestClient

from app.main import app


@pytest.fixture
def client():
    return TestClient(app)


class TestEndpointPerformance:
    """Performance tests for individual endpoints"""

    def test_health_endpoint_performance(self, client):
        """Test health endpoint response time"""
        start_time = time.time()

        response = client.get("/api/v1/health")

        end_time = time.time()
        response_time = (end_time - start_time) * 1000  # Convert to milliseconds

        assert response.status_code == 200
        assert response_time < 100  # Less than 100ms

    def test_users_endpoint_performance(self, client):
        """Test users endpoint response time"""
        start_time = time.time()

        response = client.get("/api/v1/users")

        end_time = time.time()
        response_time = (end_time - start_time) * 1000

        # Allow for authentication or other factors
        assert response.status_code in [200, 401, 403]
        assert response_time < 500  # Less than 500ms

    def test_organizations_endpoint_performance(self, client):
        """Test organizations endpoint response time"""
        start_time = time.time()

        response = client.get("/api/v1/organizations")

        end_time = time.time()
        response_time = (end_time - start_time) * 1000

        assert response.status_code in [200, 401, 403]
        assert response_time < 300  # Less than 300ms

    def test_concurrent_endpoint_access(self, client):
        """Test endpoint performance under concurrent access"""
        import queue
        import threading

        result_queue = queue.Queue()

        def make_request():
            start_time = time.time()
            response = client.get("/api/v1/health")
            end_time = time.time()

            result_queue.put(
                {
                    "status_code": response.status_code,
                    "response_time": (end_time - start_time) * 1000,
                }
            )

        # Create concurrent threads
        threads = []
        for _ in range(10):
            thread = threading.Thread(target=make_request)
            threads.append(thread)
            thread.start()

        # Wait for all threads to complete
        for thread in threads:
            thread.join()

        # Collect results
        results = []
        while not result_queue.empty():
            results.append(result_queue.get())

        # Assert performance under concurrent load
        assert len(results) == 10
        avg_response_time = sum(r["response_time"] for r in results) / len(results)
        assert avg_response_time < 200  # Average response time under concurrent load

        successful_requests = sum(1 for r in results if r["status_code"] == 200)
        assert successful_requests >= 8  # At least 80% success rate
