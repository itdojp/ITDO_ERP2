[project]
name = "itdo-erp-backend"
version = "0.1.0"
description = "ITDO ERP System Backend"
authors = [
    {name = "ITDO Team", email = "erpdevelop@itdo.jp"},
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "psycopg2-binary>=2.9.9",
    "asyncpg>=0.29.0",
    "redis>=5.0.1",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "email-validator>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "httpx>=0.25.2",
    "celery>=5.3.4",
    "python-keycloak>=3.7.0",
    "pillow>=11.3.0",
    "pytz>=2025.2",
    "types-pytz>=2025.2.0.20250516",
    "pyjwt>=2.10.1",
    "structlog>=25.4.0",
    "prometheus-client>=0.22.1",
    "opentelemetry-api>=1.35.0",
    "opentelemetry-sdk>=1.35.0",
    "opentelemetry-instrumentation-fastapi>=0.56b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.56b0",
    "opentelemetry-instrumentation-redis>=0.56b0",
    "opentelemetry-exporter-jaeger-thrift>=1.21.0",
    "psutil>=7.0.0",
    "deprecated>=1.2.18",
    "pandas>=2.3.1",
]
requires-python = ">=3.13"
readme = "README.md"
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
    "pytest-mock>=3.12.0",
    "types-python-jose>=3.3.4",
    "types-passlib>=1.7.7",
    "sqlalchemy[mypy]>=2.0.23",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py313"
# Fix inconsistent line ending handling
respect-gitignore = true
extend-exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "TC"]
ignore = [
    "E402",  # Module level import not at top of file (needed for circular import prevention)
    "N805",  # First argument of a method should be named `self` (allow cls for classmethods)
    "TC001", # Move application import into a type-checking block
    "TC002", # Move third-party import into a type-checking block
    "TC003", # Move standard library import into a type-checking block
]

[tool.ruff.lint.per-file-ignores]
"tests/test_task_management/**/*.py" = ["F821"]  # Allow undefined names in incomplete test files
"tests/conftest.py" = ["F401", "I001", "E402"]  # Allow unused imports and custom import order for model registration

[tool.ruff.format]
# Ensure consistent formatting across environments
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88

[tool.mypy]
python_version = "3.13"
strict = true
mypy_path = "$MYPY_CONFIG_FILE_DIR"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true

pretty = true
plugins = ["pydantic.mypy"]

# Ignore untyped imports for monitoring dependencies
[[tool.mypy.overrides]]
module = [
    "structlog",
    "prometheus_client", 
    "opentelemetry.*",
    "psutil"
]
ignore_missing_imports = true

# Exclude problematic module paths
[[tool.mypy.overrides]]
module = "tests.factories.*"
ignore_errors = true

# Pydantic plugin configuration
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# Disallow dynamic typing
disallow_any_unimported = true
disallow_any_expr = false  # Too restrictive for now
disallow_any_decorated = false  # Too restrictive for decorators
disallow_any_explicit = false  # Disabled due to Pydantic BaseModel
disallow_any_generics = true
disallow_subclassing_any = true

# Test-specific overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_decorators = false

# Factory imports
[[tool.mypy.overrides]]
module = "tests.factories"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --cov=app --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/venv/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "mypy==1.16.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "ruff==0.12.2",
    "types-python-jose>=3.3.4",
    "types-passlib>=1.7.7",
    "types-psutil>=7.0.0.20250601",
    "faker>=37.4.0",
    "types-pytz>=2025.2.0.20250516",
]
