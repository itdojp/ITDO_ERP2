"""
Database optimization migration
Generated by CC02 v37.0 Database Optimizer
Created: 2025-07-23T20:26:09.742735
"""

from datetime import datetime

from alembic import op


def upgrade():
    """Add performance optimization indexes."""
    print(f"üîß Adding performance indexes at {datetime.utcnow()}")

    # Frequently filtered by user and time range
    # Estimated improvement: 60-80% faster filtered queries
    try:
        op.execute(
            """CREATE INDEX idx_audit_logs_user_time ON audit_logs(user_id, created_at);"""
        )
        print("‚úÖ Added index: audit_logs.user_id,created_at")
    except Exception as e:
        print(f"‚ö†Ô∏è Index creation failed (may already exist): {e}")

    # Common query pattern for user activity reports
    # Estimated improvement: 60-80% faster filtered queries
    try:
        op.execute(
            """CREATE INDEX idx_user_activity_user_time ON user_activity_logs(user_id, timestamp);"""
        )
        print("‚úÖ Added index: user_activity_logs.user_id,timestamp")
    except Exception as e:
        print(f"‚ö†Ô∏è Index creation failed (may already exist): {e}")

    # Task management queries often filter by status and due date
    # Estimated improvement: 60-80% faster filtered queries
    try:
        op.execute("""CREATE INDEX idx_tasks_status_due ON tasks(status, due_date);""")
        print("‚úÖ Added index: tasks.status,due_date")
    except Exception as e:
        print(f"‚ö†Ô∏è Index creation failed (may already exist): {e}")

    # Financial reports often group by category and time
    # Estimated improvement: 60-80% faster filtered queries
    try:
        op.execute(
            """CREATE INDEX idx_expenses_category_time ON expenses(category_id, created_at);"""
        )
        print("‚úÖ Added index: expenses.category_id,created_at")
    except Exception as e:
        print(f"‚ö†Ô∏è Index creation failed (may already exist): {e}")

    # Email is used for authentication and should be unique
    # Estimated improvement: 90-95% faster lookups
    try:
        op.execute("""CREATE UNIQUE INDEX idx_users_email ON users(email);""")
        print("‚úÖ Added index: users.email")
    except Exception as e:
        print(f"‚ö†Ô∏è Index creation failed (may already exist): {e}")

    # Active organization queries with temporal filtering
    # Estimated improvement: 60-80% faster filtered queries
    try:
        op.execute(
            """CREATE INDEX idx_organizations_active_time ON organizations(is_active, created_at);"""
        )
        print("‚úÖ Added index: organizations.is_active,created_at")
    except Exception as e:
        print(f"‚ö†Ô∏è Index creation failed (may already exist): {e}")


def downgrade():
    """Remove optimization indexes."""
    print(f"üîß Removing performance indexes at {datetime.utcnow()}")

    # Remove Frequently filtered by user and time range
    try:
        op.execute("DROP INDEX IF EXISTS idx_audit_logs_user_id_created_at;")
        print("‚úÖ Removed index: idx_audit_logs_user_id_created_at")
    except Exception as e:
        print(f"‚ö†Ô∏è Index removal failed: {e}")

    # Remove Common query pattern for user activity reports
    try:
        op.execute("DROP INDEX IF EXISTS idx_user_activity_logs_user_id_timestamp;")
        print("‚úÖ Removed index: idx_user_activity_logs_user_id_timestamp")
    except Exception as e:
        print(f"‚ö†Ô∏è Index removal failed: {e}")

    # Remove Task management queries often filter by status and due date
    try:
        op.execute("DROP INDEX IF EXISTS idx_tasks_status_due_date;")
        print("‚úÖ Removed index: idx_tasks_status_due_date")
    except Exception as e:
        print(f"‚ö†Ô∏è Index removal failed: {e}")

    # Remove Financial reports often group by category and time
    try:
        op.execute("DROP INDEX IF EXISTS idx_expenses_category_id_created_at;")
        print("‚úÖ Removed index: idx_expenses_category_id_created_at")
    except Exception as e:
        print(f"‚ö†Ô∏è Index removal failed: {e}")

    # Remove Email is used for authentication and should be unique
    try:
        op.execute("DROP INDEX IF EXISTS idx_users_email;")
        print("‚úÖ Removed index: idx_users_email")
    except Exception as e:
        print(f"‚ö†Ô∏è Index removal failed: {e}")

    # Remove Active organization queries with temporal filtering
    try:
        op.execute("DROP INDEX IF EXISTS idx_organizations_is_active_created_at;")
        print("‚úÖ Removed index: idx_organizations_is_active_created_at")
    except Exception as e:
        print(f"‚ö†Ô∏è Index removal failed: {e}")
