name: Improved CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Test environment variables
  SECRET_KEY: test-secret-key-for-testing-only-32-chars-long
  ALGORITHM: HS256
  ACCESS_TOKEN_EXPIRE_MINUTES: 1440
  REFRESH_TOKEN_EXPIRE_DAYS: 7
  BCRYPT_ROUNDS: 4

jobs:
  # Python型チェックジョブ
  python-typecheck:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run mypy type checking (informational)
      run: |
        echo "Running mypy for information..."
        uv run mypy app/ --show-error-context --show-error-codes || true
    
    - name: Run ruff linting
      run: uv run ruff check .
    
    - name: Run ruff formatting check  
      run: uv run ruff format --check .

  # TypeScript型チェックジョブ  
  typescript-typecheck:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: TypeScript type checking
      run: npm run typecheck
    
    - name: Run ESLint
      run: npm run lint

  # Backend テストジョブ（改善版）
  backend-test:
    runs-on: ubuntu-latest
    needs: python-typecheck
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: itdo_password
          POSTGRES_USER: itdo_user
          POSTGRES_DB: itdo_erp_test
          POSTGRES_INITDB_ARGS: "--auth-host=trust"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U itdo_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"
    
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://itdo_user:itdo_password@localhost:5432/itdo_erp_test
        REDIS_URL: redis://localhost:6379
      run: |
        # Create a clean test database
        uv run python -c "
        from app.models.base import Base
        from sqlalchemy import create_engine
        import os
        engine = create_engine(os.getenv('DATABASE_URL'))
        Base.metadata.create_all(bind=engine)
        print('Test database initialized')
        "
    
    - name: Run unit tests (SQLite)
      env:
        USE_SQLITE_TESTS: "true"
        REDIS_URL: redis://localhost:6379
      run: |
        echo "Running unit tests with SQLite..."
        uv run pytest tests/unit/ -v --tb=short --timeout=60
    
    - name: Run integration tests (PostgreSQL)
      env:
        DATABASE_URL: postgresql://itdo_user:itdo_password@localhost:5432/itdo_erp_test
        REDIS_URL: redis://localhost:6379
      run: |
        echo "Running integration tests with PostgreSQL..."
        uv run pytest tests/integration/ -v --tb=short --timeout=120 --maxfail=5
    
    - name: Run API tests (PostgreSQL) 
      env:
        DATABASE_URL: postgresql://itdo_user:itdo_password@localhost:5432/itdo_erp_test
        REDIS_URL: redis://localhost:6379
      run: |
        echo "Running API tests with PostgreSQL..."
        uv run pytest tests/integration/api/ -v --tb=short --timeout=180 --maxfail=10 --durations=10
    
    - name: Generate coverage report
      env:
        DATABASE_URL: postgresql://itdo_user:itdo_password@localhost:5432/itdo_erp_test
        REDIS_URL: redis://localhost:6379
      run: |
        echo "Generating coverage report..."
        uv run pytest tests/integration/api/v1/test_users.py --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend テストジョブ
  frontend-test:
    runs-on: ubuntu-latest
    needs: typescript-typecheck
    timeout-minutes: 10
    defaults:
      run:
        working-directory: ./frontend
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm run coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

  # 軽量なE2Eテスト（重要なパスのみ）
  critical-e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'e2e-test')
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: e2e/package-lock.json
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Start services
      run: |
        docker compose -f infra/compose-data.yaml up -d
        sleep 30  # Wait for services
    
    - name: Start backend
      run: |
        cd backend
        uv sync --dev
        uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Start frontend
      run: |
        cd frontend
        npm ci
        npm run build
        npm run preview &
        sleep 10
    
    - name: Run critical E2E tests only
      run: |
        cd e2e
        npm ci
        npx playwright install --with-deps
        npx playwright test tests/critical/ --reporter=list
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: e2e/test-results/
    
    - name: Stop services
      if: always()
      run: docker compose -f infra/compose-data.yaml down

  # セキュリティスキャン（並行実行）
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Python security scan
      run: |
        cd backend
        pip install bandit safety
        bandit -r app/
        safety check
    
    - name: Run Node.js security audit
      run: |
        cd frontend
        npm audit --audit-level moderate

  # 成功時のまとめ
  test-summary:
    runs-on: ubuntu-latest
    needs: [python-typecheck, typescript-typecheck, backend-test, frontend-test, security-scan]
    if: always()
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Python Typecheck: ${{ needs.python-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- TypeScript Typecheck: ${{ needs.typescript-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Tests: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Tests: ${{ needs.frontend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-test.result }}" == "failure" ]]; then
          echo "❌ Backend tests failed - check logs for details" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        if [[ "${{ needs.frontend-test.result }}" == "failure" ]]; then
          echo "❌ Frontend tests failed - check logs for details" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        echo "✅ All critical tests passed!" >> $GITHUB_STEP_SUMMARY