# CI/CD Pipeline for ITDO ERP Backend (Python FastAPI)
name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/ci-cd-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'
  REGISTRY: registry.itdo-erp.com
  IMAGE_NAME: itdo-erp/backend
  KUBERNETES_NAMESPACE: production

jobs:
  # Security and Quality Checks
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Secret scanning with GitLeaks
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./backend
          base: main
          head: HEAD

  # Code Quality and Testing
  test:
    name: 🧪 Test & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          uv sync --all-extras
          
      - name: Run linting (ruff)
        working-directory: ./backend
        run: |
          uv run ruff check --output-format=github .
          uv run ruff format --check .
          
      - name: Run type checking (mypy)
        working-directory: ./backend
        run: |
          uv run mypy --strict app/
          
      - name: Run unit tests
        working-directory: ./backend
        run: |
          uv run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
          
      - name: Run integration tests
        working-directory: ./backend
        run: |
          uv run pytest tests/integration/ -v
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
          
      - name: Run security tests
        working-directory: ./backend
        run: |
          uv run pytest tests/security/ -v
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
          
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          
  # Performance Testing
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        
      - name: Install dependencies
        working-directory: ./backend
        run: uv sync
        
      - name: Start application
        working-directory: ./backend
        run: |
          uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          ENVIRONMENT: testing
          
      - name: Install k6
        run: |
          curl https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
          sudo mv k6 /usr/local/bin/
          
      - name: Run performance tests
        run: |
          cd performance-testing
          k6 run --summary-trend-stats="avg,min,med,max,p(95),p(99)" smoke-test.js
          k6 run --summary-trend-stats="avg,min,med,max,p(95),p(99)" load-test.js

  # Build and Push Container Image
  build-and-push:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ github.run_id }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}
            
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  # Deploy to Development Environment
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context
          
      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/backend-api backend-api=${{ needs.build-and-push.outputs.image-tag }} -n development
          kubectl rollout status deployment/backend-api -n development --timeout=300s
          
      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never -n development -- \
            curl -f http://backend-api.development.svc.cluster.local:8000/health
            
  # Deploy to Staging Environment
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Deploy with Helm
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade backend-api ./helm/backend-api \
            --namespace staging \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set environment=staging \
            --wait --timeout=10m
            
      - name: Run end-to-end tests
        run: |
          cd e2e-tests
          npm ci
          npm run test:staging

  # Deploy to Production (Manual Approval)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Deploy with Helm (Blue-Green)
        run: |
          export KUBECONFIG=kubeconfig
          # Blue-green deployment strategy
          helm upgrade backend-api ./helm/backend-api \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set environment=production \
            --set deployment.strategy.type=RollingUpdate \
            --set deployment.strategy.rollingUpdate.maxUnavailable=0 \
            --set deployment.strategy.rollingUpdate.maxSurge=1 \
            --wait --timeout=15m
            
      - name: Verify deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/backend-api -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
          
          # Health check
          kubectl run health-check --image=curlimages/curl:latest --rm -i --restart=Never \
            -n ${{ env.KUBERNETES_NAMESPACE }} -- \
            curl -f http://backend-api.${{ env.KUBERNETES_NAMESPACE }}.svc.cluster.local:8000/health
            
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: '✅ Backend API successfully deployed to production'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          text: '❌ Backend API deployment to production failed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Rollback deployment
        run: |
          export KUBECONFIG=kubeconfig
          helm rollback backend-api -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout status deployment/backend-api -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s