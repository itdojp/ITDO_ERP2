# CI/CD Pipeline for ITDO ERP Frontend (React + TypeScript)
name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'frontend/**'
      - '.github/workflows/ci-cd-frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'

env:
  NODE_VERSION: '20'
  REGISTRY: registry.itdo-erp.com
  IMAGE_NAME: itdo-erp/frontend
  KUBERNETES_NAMESPACE: production

jobs:
  # Security and Quality Checks
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run npm audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level=moderate --production
          
      - name: Run dependency vulnerability scan
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: |
          cd frontend
          npx audit-ci --config audit-ci.json
          
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          source-root: frontend
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Code Quality and Testing
  test:
    name: 🧪 Test & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./frontend
        run: |
          npm run lint -- --format=@microsoft/eslint-formatter-sarif --output-file=eslint-results.sarif
        continue-on-error: true
        
      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: frontend/eslint-results.sarif
          wait-for-processing: true
          
      - name: Run TypeScript type checking
        working-directory: ./frontend
        run: npm run typecheck
        
      - name: Run unit tests
        working-directory: ./frontend
        run: |
          npm run test:coverage -- --reporter=junit --outputFile=junit.xml
        env:
          CI: true
          
      - name: Run component tests
        working-directory: ./frontend
        run: |
          npm run test:component -- --reporter=junit --outputFile=component-junit.xml
          
      - name: Upload test results
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Frontend Test Results
          path: 'frontend/*junit.xml'
          reporter: jest-junit
          
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Accessibility and Performance Testing
  accessibility-performance:
    name: ♿ A11y & Performance
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3001
          
      - name: Start application for testing
        working-directory: ./frontend
        run: |
          npm install -g serve
          serve -s dist -l 3000 &
          sleep 10
          
      - name: Run Lighthouse CI
        working-directory: ./frontend
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Run accessibility tests
        working-directory: ./frontend
        run: |
          npm run test:a11y

  # Build and Push Container Image
  build-and-push:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VITE_API_URL=https://api.itdo-erp.com
            VITE_APP_VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.run_id }}
            
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

  # End-to-End Testing
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install E2E dependencies
        working-directory: ./e2e-tests
        run: npm ci
        
      - name: Install Playwright
        working-directory: ./e2e-tests
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        working-directory: ./e2e-tests
        run: |
          npx playwright test --reporter=html
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:8000
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: e2e-tests/playwright-report/
          retention-days: 7

  # Deploy to Development Environment
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context
          
      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/frontend-app frontend-app=${{ needs.build-and-push.outputs.image-tag }} -n development
          kubectl rollout status deployment/frontend-app -n development --timeout=300s
          
      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          kubectl run smoke-test --image=curlimages/curl:latest --rm -i --restart=Never -n development -- \
            curl -f http://frontend-app.development.svc.cluster.local:80/

  # Deploy to Staging Environment
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, accessibility-performance]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Deploy with Helm
        run: |
          export KUBECONFIG=kubeconfig
          helm upgrade frontend-app ./helm/frontend-app \
            --namespace staging \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set environment=staging \
            --set config.apiUrl=https://api-staging.itdo-erp.com \
            --wait --timeout=10m

  # Deploy to Production (Manual Approval)
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Deploy with Helm (Canary)
        run: |
          export KUBECONFIG=kubeconfig
          # Canary deployment - deploy 10% traffic to new version
          helm upgrade frontend-app ./helm/frontend-app \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set environment=production \
            --set config.apiUrl=https://api.itdo-erp.com \
            --set deployment.strategy.canary.enabled=true \
            --set deployment.strategy.canary.weight=10 \
            --wait --timeout=15m
            
      - name: Canary validation
        run: |
          export KUBECONFIG=kubeconfig
          # Wait for canary metrics
          sleep 300
          
          # Check canary metrics (error rate, latency)
          # This would typically integrate with monitoring system
          echo "Validating canary deployment metrics..."
          
      - name: Promote to full production
        run: |
          export KUBECONFIG=kubeconfig
          # Promote canary to 100% traffic
          helm upgrade frontend-app ./helm/frontend-app \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --set image.tag=${{ github.sha }} \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set environment=production \
            --set config.apiUrl=https://api.itdo-erp.com \
            --set deployment.strategy.canary.enabled=false \
            --wait --timeout=10m
            
      - name: Verify deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/frontend-app -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
          
          # Health check
          kubectl run health-check --image=curlimages/curl:latest --rm -i --restart=Never \
            -n ${{ env.KUBERNETES_NAMESPACE }} -- \
            curl -f http://frontend-app.${{ env.KUBERNETES_NAMESPACE }}.svc.cluster.local:80/
            
      - name: Update CDN cache
        run: |
          # Invalidate CDN cache for new deployment
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
            
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: '✅ Frontend App successfully deployed to production'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          text: '❌ Frontend App deployment to production failed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Rollback deployment
        run: |
          export KUBECONFIG=kubeconfig
          helm rollback frontend-app -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl rollout status deployment/frontend-app -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
          
      - name: Clear CDN cache after rollback
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'