name: Unified Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      
      deploy_backend:
        description: 'Deploy backend'
        required: true
        default: true
        type: boolean
      
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        default: true
        type: boolean
      
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean
      
      rollback_version:
        description: 'Rollback to specific version'
        required: false
        type: string

permissions:
  contents: read
  packages: write
  deployments: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "20"
  DEPLOY_TIMEOUT: 600
  HEALTH_CHECK_RETRIES: 30

jobs:
  # Determine deployment environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate version
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.rollback_version }}" ]]; then
            echo "version=${{ github.event.inputs.rollback_version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  # Security and quality checks
  security-checks:
    needs: setup
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

  # Run tests
  test-backend:
    needs: setup
    if: ${{ github.event.inputs.skip_tests != 'true' && github.event.inputs.deploy_backend != 'false' }}
    uses: ./.github/workflows/reusable-test-backend.yml
    secrets: inherit

  test-frontend:
    needs: setup
    if: ${{ github.event.inputs.skip_tests != 'true' && github.event.inputs.deploy_frontend != 'false' }}
    uses: ./.github/workflows/reusable-test-frontend.yml
    secrets: inherit

  # Build and push Docker images
  build-backend:
    needs: [setup, test-backend]
    if: ${{ always() && (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') && github.event.inputs.deploy_backend != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ needs.setup.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ needs.setup.outputs.environment }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    needs: [setup, test-frontend]
    if: ${{ always() && (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') && github.event.inputs.deploy_frontend != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ needs.setup.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ needs.setup.outputs.environment }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to target environment
  deploy:
    needs: [setup, build-backend, build-frontend]
    if: ${{ always() && (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to ${{ needs.setup.outputs.environment }}
        id: deploy
        run: |
          echo "Deploying version ${{ needs.setup.outputs.version }} to ${{ needs.setup.outputs.environment }}"
          # Actual deployment commands would go here
          # kubectl apply -f k8s/${{ needs.setup.outputs.environment }}/
          # or ansible-playbook deploy.yml -e "env=${{ needs.setup.outputs.environment }}"
          
          if [[ "${{ needs.setup.outputs.environment }}" == "production" ]]; then
            echo "url=https://app.itdo.jp" >> $GITHUB_OUTPUT
          else
            echo "url=https://staging.itdo.jp" >> $GITHUB_OUTPUT
          fi
      
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
      
      - name: Health check
        run: |
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            if curl -f "${{ steps.deploy.outputs.url }}/health" > /dev/null 2>&1; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying in 10s..."
            sleep 10
          done
          echo "Health check failed after ${{ env.HEALTH_CHECK_RETRIES }} attempts"
          exit 1

  # Post-deployment tasks
  post-deploy:
    needs: [setup, deploy]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against ${{ needs.setup.outputs.environment }}"
          # Smoke test commands
      
      - name: Update deployment status
        run: |
          echo "Deployment successful: ${{ needs.setup.outputs.version }} to ${{ needs.setup.outputs.environment }}"
      
      - name: Send notification
        if: ${{ needs.setup.outputs.environment == 'production' }}
        run: |
          echo "Sending deployment notification"
          # Slack/Email notification