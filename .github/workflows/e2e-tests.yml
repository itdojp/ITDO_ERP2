name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: itdo_user
          POSTGRES_PASSWORD: itdo_password
          POSTGRES_DB: itdo_erp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            backend/.venv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install backend dependencies
        working-directory: backend
        run: |
          uv sync

      - name: Setup backend environment
        working-directory: backend
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://itdo_user:itdo_password@localhost:5432/itdo_erp_test" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "ENVIRONMENT=test" >> .env
          echo "BACKEND_CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000" >> .env

      - name: Run database migrations
        working-directory: backend
        run: |
          uv run alembic upgrade head

      - name: Start backend server
        working-directory: backend
        run: |
          uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/docs || exit 1

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: |
          npx playwright install --with-deps chromium firefox

      - name: Build frontend
        working-directory: frontend
        run: |
          npm run build

      - name: Start frontend server
        working-directory: frontend
        run: |
          npm run preview -- --port 3000 &
          sleep 5

      - name: Wait for services
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          timeout 60s bash -c 'until curl -f http://localhost:8000/api/v1/health; do sleep 2; done'

      - name: Run E2E tests
        working-directory: frontend
        env:
          E2E_BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000/api/v1
          E2E_ENV: ci
        run: |
          npx playwright test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 7

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-videos
          path: frontend/test-results/artifacts/
          retention-days: 3

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            let testResults = '## E2E Test Results\n\n';
            
            try {
              const resultsPath = 'frontend/test-results/e2e-results.json';
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                const { passed, failed, skipped, total } = results.stats;
                
                testResults += `‚úÖ Passed: ${passed}\n`;
                testResults += `‚ùå Failed: ${failed}\n`;
                testResults += `‚è≠Ô∏è Skipped: ${skipped}\n`;
                testResults += `üìä Total: ${total}\n\n`;
                
                if (failed > 0) {
                  testResults += '### Failed Tests:\n';
                  results.failures.forEach(failure => {
                    testResults += `- ${failure.title}: ${failure.error}\n`;
                  });
                }
              } else {
                testResults += '‚ö†Ô∏è No test results found';
              }
            } catch (error) {
              testResults += `‚ö†Ô∏è Could not parse test results: ${error.message}`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testResults
            });