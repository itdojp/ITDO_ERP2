name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: itdo_user
          POSTGRES_PASSWORD: itdo_password
          POSTGRES_DB: itdo_erp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            backend/.venv
            frontend/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install backend dependencies
        working-directory: backend
        run: |
          uv sync

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          npm ci

      - name: Install Playwright browsers
        working-directory: frontend
        run: |
          npx playwright install --with-deps

      - name: Setup backend environment
        working-directory: backend
        run: |
          echo "Creating backend environment configuration..."
          rm -f .env
          echo "DATABASE_URL=postgresql://itdo_user:itdo_password@localhost:5432/itdo_erp_test" > .env
          echo "ENVIRONMENT=test" >> .env
          echo "TESTING=true" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "BACKEND_CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000" >> .env
          echo "API_V1_PREFIX=/api/v1" >> .env
          echo "KEYCLOAK_CLIENT_SECRET=test-secret" >> .env
          echo "LOG_LEVEL=INFO" >> .env
          
          echo "Environment file created:"
          cat .env
          
          echo "Testing database configuration:"
          uv run python -c "from app.core.config import settings; print(f'Database URL: {settings.DATABASE_URL}'); print(f'Environment: {settings.ENVIRONMENT}'); print(f'Testing: {settings.TESTING}')"

      - name: Wait for services
        run: |
          chmod +x ./scripts/wait-for-services.sh
          ./scripts/wait-for-services.sh

      - name: Setup Test Database
        working-directory: backend
        run: |
          echo "Setting up environment for database operations..."
          export BACKEND_CORS_ORIGINS="http://localhost:3000,http://127.0.0.1:3000"
          export ENVIRONMENT="testing"
          export TESTING="true"
          export DATABASE_URL="postgresql://itdo_user:itdo_password@localhost:5432/itdo_erp_test"
          export REDIS_URL="redis://localhost:6379/0"
          export SECRET_KEY="test-secret-key-for-ci"
          
          echo "Running database migrations..."
          uv run alembic upgrade head
          
          echo "Initializing test data..."
          uv run python scripts/init_test_data.py
          
          echo "Verifying database setup..."
          uv run python -c "
          from app.core.config import Settings
          from app.core.database import SessionLocal
          from sqlalchemy import text
          
          settings = Settings()
          print(f'Connected to: {settings.DATABASE_URL}')
          
          session = SessionLocal()
          try:
              result = session.execute(text('SELECT COUNT(*) FROM users')).scalar()
              print(f'Users in database: {result}')
              
              result = session.execute(text('SELECT COUNT(*) FROM organizations')).scalar()
              print(f'Organizations in database: {result}')
          finally:
              session.close()
          "

      - name: Start backend service
        working-directory: backend
        run: |
          echo "Starting backend service..."
          nohup uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --log-level info > backend.log 2>&1 &
          BACKEND_PID=$!
          echo "Backend PID: $BACKEND_PID"
          echo $BACKEND_PID > backend.pid
          
          # Wait for backend to start with improved health check
          echo "Waiting for backend service to be ready..."
          for i in {1..60}; do
            if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "Backend is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Backend failed to start after 60 attempts"
              echo "Backend logs:"
              cat backend.log
              exit 1
            fi
            echo "Attempt $i/60: Backend not ready, waiting..."
            sleep 5
          done
          
          # Show startup logs
          echo "Backend startup logs:"
          tail -20 backend.log

      - name: Comprehensive Service Health Check
        run: |
          echo "Performing comprehensive service health check..."
          
          # Check backend health
          echo "Checking backend health..."
          for i in {1..60}; do
            if curl -f -s http://localhost:8000/health > /dev/null 2>&1; then
              echo "Backend health check passed!"
              curl http://localhost:8000/health
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Backend health check failed after 60 attempts"
              echo "Backend logs:"
              cat backend/backend.log || echo "No backend logs found"
              echo "Backend process status:"
              if [ -f backend/backend.pid ]; then
                BACKEND_PID=$(cat backend/backend.pid)
                ps aux | grep $BACKEND_PID || echo "Backend process not found"
              fi
              echo "Network status:"
              netstat -tlpn | grep :8000 || echo "Port 8000 not listening"
              exit 1
            fi
            echo "Attempt $i/60: Backend not ready, waiting..."
            sleep 5
          done
          
          # Test ping endpoint
          echo "Testing ping endpoint..."
          curl -f http://localhost:8000/ping || echo "Ping endpoint failed"
          
          # Test CORS headers
          echo "Testing CORS configuration..."
          curl -H "Origin: http://localhost:3000" -v http://localhost:8000/health 2>&1 | grep -i "access-control" || echo "CORS headers not found"
          
          # Test database connectivity via API
          echo "Testing database connectivity..."
          curl -f http://localhost:8000/health | grep -i "healthy" || echo "Database connectivity test failed"

      - name: Start frontend and wait for readiness
        working-directory: frontend
        run: |
          echo "Starting frontend development server..."
          nohup npm run dev > frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo "Frontend PID: $FRONTEND_PID"
          echo $FRONTEND_PID > frontend.pid
          
          echo "Waiting for frontend to be accessible..."
          for i in {1..60}; do
            if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
              echo "Frontend is ready!"
              # Additional check for content
              if curl -s http://localhost:3000 | grep -q "html\|HTML"; then
                echo "Frontend is serving HTML content!"
                break
              fi
            fi
            if [ $i -eq 60 ]; then
              echo "Frontend failed to start after 60 attempts"
              echo "Frontend logs:"
              cat frontend.log || echo "No frontend logs found"
              echo "Port status:"
              netstat -tlpn | grep :3000 || echo "Port 3000 not listening"
              exit 1
            fi
            echo "Attempt $i/60: Frontend not ready, waiting..."
            sleep 5
          done
          
          echo "Frontend startup logs:"
          tail -20 frontend.log

      - name: Run E2E tests
        working-directory: frontend
        run: |
          echo "Running E2E tests with enhanced CI configuration..."
          
          # Run all E2E tests with CI optimizations
          npx playwright test \
            --reporter=html \
            --reporter=json \
            --reporter=github \
            --workers=1 \
            --timeout=120000 \
            --retries=2 \
            --max-failures=10 \
            || echo "Some E2E tests failed, but continuing to collect artifacts..."
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          VITE_API_URL: http://localhost:8000
          VITE_API_BASE_URL: http://localhost:8000/api/v1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/
          retention-days: 30

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-screenshots
          path: frontend/test-results/
          retention-days: 7

      - name: Stop services
        if: always()
        run: |
          echo "Stopping services..."
          
          # Stop frontend
          if [ -f frontend/frontend.pid ]; then
            echo "Stopping frontend..."
            kill $(cat frontend/frontend.pid) || true
            rm -f frontend/frontend.pid
          fi
          
          # Stop backend
          if [ -f backend/backend.pid ]; then
            echo "Stopping backend..."
            kill $(cat backend/backend.pid) || true
            rm -f backend/backend.pid
          fi
          
          # Show final logs if tests failed
          if [ "${{ job.status }}" = "failure" ]; then
            echo "=== BACKEND LOGS ==="
            cat backend/backend.log 2>/dev/null || echo "No backend logs"
            echo "=== FRONTEND LOGS ==="
            cat frontend/frontend.log 2>/dev/null || echo "No frontend logs"
          fi