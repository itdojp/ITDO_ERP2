name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            infrastructure:
              - 'docker-compose*.yml'
              - 'Dockerfile*'
              - '.github/workflows/**'
              - 'monitoring/**'

  # Parallel Backend Tests
  backend-tests:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, integration, security]
        python-version: ['3.13']
      fail-fast: false

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('backend/uv.lock') }}

      - name: Install dependencies
        run: |
          cd backend
          uv sync --frozen

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd backend
          uv run pytest tests/unit/ -v --cov=app --cov-report=xml --junitxml=junit.xml

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          cd backend
          uv run pytest tests/integration/ -v --junitxml=junit.xml
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0

      - name: Run security tests
        if: matrix.test-type == 'security'
        run: |
          cd backend
          uv run bandit -r app/ -f json -o bandit-report.json || true
          uv run safety check --json --output safety-report.json || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.test-type }}-results
          path: |
            backend/junit.xml
            backend/coverage.xml
            backend/*-report.json

  # Parallel Frontend Tests
  frontend-tests:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, e2e, accessibility]
        node-version: ['20']
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd frontend
          npm run test:ci
          npm run coverage

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          cd frontend
          npx playwright install --with-deps
          npm run test:e2e

      - name: Run accessibility tests
        if: matrix.test-type == 'accessibility'
        run: |
          cd frontend
          npm run lint:accessibility || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-${{ matrix.test-type }}-results
          path: |
            frontend/coverage/
            frontend/test-results/
            frontend/playwright-report/

  # Multi-stage Build
  build-images:
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.frontend-tests.result == 'success')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    if: always()

    strategy:
      matrix:
        tool: [trivy, grype]
        component: [backend, frontend]

    steps:
      - name: Run Trivy vulnerability scanner
        if: matrix.tool == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        if: matrix.tool == 'grype'
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
          output-format: sarif
          output-file: grype-results.sarif

      - name: Upload vulnerability scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: '${{ matrix.tool }}-results.sarif'