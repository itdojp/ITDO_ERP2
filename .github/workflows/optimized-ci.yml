name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  UV_CACHE_DIR: /tmp/.uv-cache
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "18"
  POSTGRES_VERSION: "15"
  REDIS_VERSION: "7"

jobs:
  # Fast validation job - runs first for quick feedback
  fast-validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      test-changed: ${{ steps.changes.outputs.test }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changes
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
            - '.github/workflows/**'
          frontend:
            - 'frontend/**'
            - '.github/workflows/**'
          test:
            - 'backend/tests/**'
            - 'frontend/src/**/*.test.*'
            - 'e2e/**'
    
    - name: Lint commit messages
      uses: wagoid/commitlint-github-action@v5
      if: github.event_name == 'pull_request'
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # Backend type checking and linting
  backend-quality:
    runs-on: ubuntu-latest
    needs: fast-validation
    if: needs.fast-validation.outputs.backend-changed == 'true'
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up uv cache
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ hashFiles('backend/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "backend/uv.lock"
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync --dev --frozen
    
    - name: Run ruff linting
      run: |
        echo "::group::Ruff Linting"
        uv run ruff check . --output-format=github
        echo "::endgroup::"
    
    - name: Run ruff formatting check
      run: |
        echo "::group::Ruff Formatting"
        uv run ruff format --check . --diff
        echo "::endgroup::"
    
    - name: Run mypy type checking
      run: |
        echo "::group::Type Checking"
        uv run mypy . --show-error-context --show-error-codes
        echo "::endgroup::"
    
    - name: Check for unused imports
      run: |
        echo "::group::Unused Imports"
        uv run ruff check . --select F401 --exit-zero
        echo "::endgroup::"

  # Backend testing with parallel execution
  backend-test:
    runs-on: ubuntu-latest
    needs: [fast-validation, backend-quality]
    if: needs.fast-validation.outputs.backend-changed == 'true'
    timeout-minutes: 20
    strategy:
      matrix:
        test-group: [unit, integration, api]
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
          POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --shm-size=256mb
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up uv cache
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: uv-${{ runner.os }}-${{ hashFiles('backend/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "backend/uv.lock"
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: uv sync --dev --frozen
    
    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        uv run alembic upgrade head
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-testing-only-32-chars-long
      run: |
        case "${{ matrix.test-group }}" in
          unit)
            uv run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term-missing --junit-xml=junit-unit.xml
            ;;
          integration)
            uv run pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing --junit-xml=junit-integration.xml
            ;;
          api)
            uv run pytest tests/integration/api/ -v --cov=app --cov-append --cov-report=xml --cov-report=term-missing --junit-xml=junit-api.xml
            ;;
        esac
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results-${{ matrix.test-group }}
        path: |
          backend/junit-*.xml
          backend/coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.test-group == 'api'
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend quality and testing
  frontend-quality:
    runs-on: ubuntu-latest
    needs: fast-validation
    if: needs.fast-validation.outputs.frontend-changed == 'true'
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: TypeScript type checking
      run: |
        echo "::group::TypeScript Type Checking"
        npm run typecheck
        echo "::endgroup::"
    
    - name: ESLint
      run: |
        echo "::group::ESLint"
        npm run lint -- --format=@eslint/eslint-formatter-github
        echo "::endgroup::"
    
    - name: Check for unused exports
      run: |
        echo "::group::Unused Exports"
        npx ts-unused-exports tsconfig.json --showLineNumber || true
        echo "::endgroup::"
    
    - name: Bundle size analysis
      run: |
        echo "::group::Bundle Analysis"
        npm run build
        npx bundlesize
        echo "::endgroup::"

  frontend-test:
    runs-on: ubuntu-latest
    needs: [fast-validation, frontend-quality]
    if: needs.fast-validation.outputs.frontend-changed == 'true'
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/test-results.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/coverage-final.json
        flags: frontend
        name: frontend-coverage

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'pull_request' && (needs.fast-validation.outputs.backend-changed == 'true' || needs.fast-validation.outputs.frontend-changed == 'true')
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Start test environment
      run: |
        # Start data services
        docker compose -f infra/compose-data.yaml up -d
        
        # Wait for services
        timeout 60 bash -c 'until docker compose -f infra/compose-data.yaml ps | grep -q "healthy"; do sleep 2; done'
        
        # Start backend
        cd backend
        uv sync --dev --frozen
        uv run alembic upgrade head
        uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        
        # Wait for backend
        timeout 30 bash -c 'until curl -f http://localhost:8000/api/v1/ping; do sleep 2; done'
    
    - name: API Performance Test
      run: |
        cd backend
        # Install and run API performance tests
        uv add --dev locust
        uv run locust --headless --users 50 --spawn-rate 10 --run-time 60s --host http://localhost:8000 -f tests/performance/locustfile.py
    
    - name: Frontend Performance Test
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
        npm run build
        
        # Lighthouse CI
        npm install -g @lhci/cli
        lhci autorun
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          backend/performance-report.html
          frontend/lighthouse-report.html
    
    - name: Cleanup
      if: always()
      run: docker compose -f infra/compose-data.yaml down

  # E2E testing with Playwright
  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: needs.fast-validation.outputs.test-changed == 'true' || github.event_name == 'push'
    timeout-minutes: 30
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/3, 2/3, 3/3]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: e2e/package-lock.json
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
    
    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}
    
    - name: Start test environment
      run: |
        # Start data services
        docker compose -f infra/compose-data.yaml up -d
        
        # Start backend
        cd backend
        uv sync --dev --frozen
        uv run alembic upgrade head
        uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        
        # Start frontend
        cd ../frontend
        npm ci --prefer-offline --no-audit
        npm run build
        npm run preview -- --port 3000 &
        
        # Wait for services
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/v1/ping && curl -f http://localhost:3000; do sleep 2; done'
    
    - name: Install Playwright
      run: |
        cd e2e
        npm ci --prefer-offline --no-audit
        npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Run E2E tests
      run: |
        cd e2e
        npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
    
    - name: Upload E2E results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}-${{ strategy.job-index }}
        path: |
          e2e/test-results/
          e2e/playwright-report/
    
    - name: Cleanup
      if: always()
      run: docker compose -f infra/compose-data.yaml down

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: fast-validation
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment preparation
  build-artifacts:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.multi-stage
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/itdo-erp:latest
          ghcr.io/${{ github.repository_owner }}/itdo-erp:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Generate deployment manifest
      run: |
        mkdir -p deployment
        envsubst < k8s/deployment.template.yaml > deployment/deployment.yaml
      env:
        IMAGE_TAG: ${{ github.sha }}
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: deployment/

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
        text: |
          ${{ github.workflow }} workflow completed
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Result: ${{ job.status }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}