name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 毎日午前2時に実行
    - cron: '0 2 * * *'

jobs:
  # Python セキュリティスキャン
  python-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run Bandit security linter
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety check for known vulnerabilities
      run: |
        uv add --dev safety
        uv run safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: python-security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # Node.js セキュリティスキャン
  nodejs-security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit-report.json
      continue-on-error: true
    
    - name: Run ESLint security rules
      run: |
        npm install eslint-plugin-security
        npx eslint --ext .ts,.tsx src/ --format json -o eslint-security-report.json
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: nodejs-security-reports
        path: |
          frontend/npm-audit-report.json
          frontend/eslint-security-report.json

  # Container セキュリティスキャン
  container-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build backend container
      run: |
        docker build -t itdo-erp-backend:test ./backend
    
    - name: Build frontend container  
      run: |
        docker build -t itdo-erp-frontend:test ./frontend
    
    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'itdo-erp-backend:test'
        format: 'json'
        output: 'trivy-backend-report.json'
    
    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'itdo-erp-frontend:test'
        format: 'json'
        output: 'trivy-frontend-report.json'
    
    - name: Upload container security scan results
      uses: actions/upload-artifact@v4
      with:
        name: container-security-reports
        path: |
          trivy-backend-report.json
          trivy-frontend-report.json

  # OWASP ZAP セキュリティテスト
  owasp-zap:
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start application services
      run: |
        docker compose -f infra/compose-data.yaml up -d
        sleep 30
    
    - name: Start application
      run: |
        # Backend起動
        cd backend
        docker build -t itdo-erp-backend .
        docker run -d --name backend-test --network host itdo-erp-backend
        
        # Frontend起動  
        cd ../frontend
        docker build -t itdo-erp-frontend .
        docker run -d --name frontend-test -p 3000:3000 itdo-erp-frontend
        
        sleep 30
    
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: OWASP ZAP API Scan
      uses: zaproxy/action-api-scan@v0.7.0
      with:
        target: 'http://localhost:8000/api/v1/openapi.json'
        format: openapi
        cmd_options: '-a'
    
    - name: Cleanup
      if: always()
      run: |
        docker stop backend-test frontend-test || true
        docker rm backend-test frontend-test || true
        docker compose -f infra/compose-data.yaml down

  # セキュリティレポート統合
  security-report:
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security, container-security]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all security reports
      uses: actions/download-artifact@v4
    
    - name: Generate security summary
      run: |
        mkdir -p security-reports
        
        # セキュリティレポート統合スクリプト
        cat > generate-security-summary.py << 'EOF'
        import json
        import os
        from pathlib import Path
        
        def load_json_report(file_path):
            try:
                with open(file_path, 'r') as f:
                    return json.load(f)
            except:
                return None
        
        summary = {
            "scan_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "python_security": {
                "bandit": load_json_report("python-security-reports/bandit-report.json"),
                "safety": load_json_report("python-security-reports/safety-report.json")
            },
            "nodejs_security": {
                "npm_audit": load_json_report("nodejs-security-reports/npm-audit-report.json"),
                "eslint": load_json_report("nodejs-security-reports/eslint-security-report.json")
            },
            "container_security": {
                "backend": load_json_report("container-security-reports/trivy-backend-report.json"),
                "frontend": load_json_report("container-security-reports/trivy-frontend-report.json")
            }
        }
        
        with open("security-reports/security-summary.json", "w") as f:
            json.dump(summary, f, indent=2)
        
        print("Security summary generated successfully")
        EOF
        
        python generate-security-summary.py
    
    - name: Upload consolidated security report
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-reports/security-summary.json
    
    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const prNumber = context.payload.pull_request.number;
          
          let comment = `🔒 **セキュリティスキャン結果**\n\n`;
          comment += `スキャン実行日時: ${new Date().toISOString()}\n\n`;
          comment += `| カテゴリ | ステータス | 詳細 |\n`;
          comment += `|---------|-----------|------|\n`;
          comment += `| Python Security | ✅ 完了 | Bandit + Safety 実行済み |\n`;
          comment += `| Node.js Security | ✅ 完了 | npm audit + ESLint 実行済み |\n`;
          comment += `| Container Security | ✅ 完了 | Trivy スキャン実行済み |\n`;
          comment += `\n詳細なレポートは Artifacts からダウンロードできます。\n`;
          comment += `\n---\n`;
          comment += `*このコメントは GitHub Actions により自動生成されました*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: comment
          });