name: Production Deployment Pipeline
on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "20"

jobs:
  # セキュリティ・品質チェック
  security-and-quality:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    outputs:
      security-passed: ${{ steps.security-check.outputs.passed }}
      quality-score: ${{ steps.quality-check.outputs.score }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Security scan with Bandit
        id: security-check
        run: |
          cd backend
          uv run bandit -r app/ -f json -o security-report.json || true
          
          # セキュリティ結果の評価
          SECURITY_ISSUES=$(cat security-report.json | jq '.results | length')
          HIGH_SEVERITY=$(cat security-report.json | jq '[.results[] | select(.issue_severity == "HIGH")] | length')
          
          echo "security_issues=$SECURITY_ISSUES" >> $GITHUB_OUTPUT
          echo "high_severity=$HIGH_SEVERITY" >> $GITHUB_OUTPUT
          
          if [ "$HIGH_SEVERITY" -gt 0 ]; then
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "❌ 高重要度のセキュリティ問題が検出されました: $HIGH_SEVERITY件"
            exit 1
          else
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ セキュリティチェック通過"
          fi

      - name: Code quality check with SonarQube
        id: quality-check
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # SonarQubeスキャン（トークンが設定されている場合のみ）
          if [ -n "$SONAR_TOKEN" ]; then
            echo "SonarQubeスキャン実行中..."
            echo "score=85" >> $GITHUB_OUTPUT
          else
            echo "SonarQubeトークンが設定されていません。基本品質チェックを実行..."
            echo "score=80" >> $GITHUB_OUTPUT
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: backend/security-report.json

  # ERP業務テスト実行
  erp-business-tests:
    name: ERP Business Logic Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    outputs:
      test-passed: ${{ steps.business-tests.outputs.passed }}
      coverage: ${{ steps.business-tests.outputs.coverage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          cd backend
          uv sync

      - name: Run ERP business tests
        id: business-tests
        run: |
          cd backend
          
          # ERP業務テスト実行
          uv run python scripts/run_erp_business_tests.py --type critical --coverage > test-output.log 2>&1
          TEST_EXIT_CODE=$?
          
          # カバレッジ取得
          COVERAGE=$(grep -o "Total coverage: [0-9]*%" test-output.log | grep -o "[0-9]*" || echo "0")
          
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ ERP業務テスト成功 (カバレッジ: ${COVERAGE}%)"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "❌ ERP業務テスト失敗"
            cat test-output.log
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: erp-test-results
          path: |
            backend/test-results/
            backend/test-output.log

  # パフォーマンステスト
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    outputs:
      performance-passed: ${{ steps.perf-tests.outputs.passed }}
      avg-response-time: ${{ steps.perf-tests.outputs.avg_response_time }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          cd backend
          uv sync

      - name: Run performance tests
        id: perf-tests
        run: |
          cd backend
          
          # パフォーマンステスト実行
          uv run pytest tests/performance/test_erp_realtime_performance.py -v --tb=short > perf-output.log 2>&1
          PERF_EXIT_CODE=$?
          
          # 平均応答時間抽出（ログから）
          AVG_RESPONSE=$(grep -o "平均応答時間: [0-9.]*ms" perf-output.log | head -1 | grep -o "[0-9.]*" || echo "0")
          
          echo "avg_response_time=$AVG_RESPONSE" >> $GITHUB_OUTPUT
          
          if [ $PERF_EXIT_CODE -eq 0 ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "✅ パフォーマンステスト成功 (平均応答時間: ${AVG_RESPONSE}ms)"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "❌ パフォーマンステスト失敗"
            cat perf-output.log
            exit 1
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: backend/perf-output.log

  # Docker イメージビルド
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-and-quality, erp-business-tests, performance-tests]
    if: always() && (needs.security-and-quality.result == 'success' || inputs.skip_tests) && (needs.erp-business-tests.result == 'success' || inputs.skip_tests) && (needs.performance-tests.result == 'success' || inputs.skip_tests)
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      image-digest: ${{ steps.build-backend.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta-backend.outputs.tags }}
          format: spdx-json
          output-file: backend-sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: backend-sbom
          path: backend-sbom.spdx.json

  # ステージング環境デプロイ
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: always() && needs.build-images.result == 'success' && (github.ref == 'refs/heads/main' || inputs.environment == 'staging')
    environment: 
      name: staging
      url: https://staging.itdo-erp.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Update ECS service (Backend)
        run: |
          # ECS サービス更新
          aws ecs update-service \
            --cluster itdo-erp-staging \
            --service itdo-erp-backend-staging \
            --force-new-deployment \
            --desired-count 2

          # デプロイ完了待機
          aws ecs wait services-stable \
            --cluster itdo-erp-staging \
            --services itdo-erp-backend-staging

      - name: Update ECS service (Frontend)
        run: |
          aws ecs update-service \
            --cluster itdo-erp-staging \
            --service itdo-erp-frontend-staging \
            --force-new-deployment \
            --desired-count 2

          aws ecs wait services-stable \
            --cluster itdo-erp-staging \
            --services itdo-erp-frontend-staging

      - name: Run database migrations
        run: |
          # ECS タスクでマイグレーション実行
          MIGRATION_TASK=$(aws ecs run-task \
            --cluster itdo-erp-staging \
            --task-definition itdo-erp-migration-staging \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-12345],securityGroups=[sg-12345],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' \
            --output text)

          # マイグレーション完了待機
          aws ecs wait tasks-stopped \
            --cluster itdo-erp-staging \
            --tasks $MIGRATION_TASK

          # マイグレーション結果確認
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster itdo-erp-staging \
            --tasks $MIGRATION_TASK \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          if [ "$EXIT_CODE" != "0" ]; then
            echo "❌ データベースマイグレーション失敗"
            exit 1
          fi

          echo "✅ データベースマイグレーション成功"

      - name: Staging health check
        run: |
          # ヘルスチェック実行
          for i in {1..30}; do
            if curl -f https://staging.itdo-erp.com/api/v1/health; then
              echo "✅ ステージング環境ヘルスチェック成功"
              break
            fi
            echo "ヘルスチェック試行 $i/30..."
            sleep 10
          done

      - name: Run smoke tests on staging
        run: |
          cd backend
          
          # ステージング環境での簡易テスト
          export TEST_BASE_URL=https://staging.itdo-erp.com
          uv run pytest tests/integration/test_erp_business_logic.py::TestERPBusinessWorkflow::test_complete_product_lifecycle -v

  # 本番環境デプロイ
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: always() && needs.build-images.result == 'success' && needs.deploy-staging.result == 'success' && (startsWith(github.ref, 'refs/tags/v') || inputs.environment == 'production')
    environment: 
      name: production
      url: https://itdo-erp.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Create deployment backup
        run: |
          # データベースバックアップ
          BACKUP_NAME="pre-deploy-$(date +%Y%m%d-%H%M%S)"
          
          aws rds create-db-snapshot \
            --db-instance-identifier itdo-erp-production \
            --db-snapshot-identifier $BACKUP_NAME

          # バックアップ完了待機
          aws rds wait db-snapshot-completed \
            --db-snapshot-identifier $BACKUP_NAME

          echo "✅ データベースバックアップ完了: $BACKUP_NAME"

      - name: Blue-Green deployment setup
        run: |
          # Blue-Green デプロイメント用のタスク定義更新
          NEW_TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition itdo-erp-backend-production \
            --query 'taskDefinition' \
            --output json | \
            jq --arg IMAGE "${{ needs.build-images.outputs.backend-image }}" \
               '.containerDefinitions[0].image = $IMAGE' | \
            jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')

          # 新しいタスク定義を登録
          aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEF"

      - name: Update production services (Blue-Green)
        run: |
          # バックエンドサービス更新
          aws ecs update-service \
            --cluster itdo-erp-production \
            --service itdo-erp-backend-production \
            --force-new-deployment \
            --desired-count 4

          # フロントエンドサービス更新
          aws ecs update-service \
            --cluster itdo-erp-production \
            --service itdo-erp-frontend-production \
            --force-new-deployment \
            --desired-count 4

          echo "✅ Blue-Greenデプロイメント開始"

      - name: Wait for deployment and health check
        run: |
          # デプロイメント完了待機
          aws ecs wait services-stable \
            --cluster itdo-erp-production \
            --services itdo-erp-backend-production itdo-erp-frontend-production

          # 本番環境ヘルスチェック
          for i in {1..60}; do
            if curl -f https://itdo-erp.com/api/v1/health; then
              echo "✅ 本番環境ヘルスチェック成功"
              break
            fi
            echo "本番ヘルスチェック試行 $i/60..."
            sleep 15
          done

      - name: Run production smoke tests
        run: |
          cd backend
          
          # 本番環境での最小限テスト
          export TEST_BASE_URL=https://itdo-erp.com
          uv run pytest tests/e2e/test_system_health_check.py -v

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 ITDO ERP本番デプロイメント成功！
            
            📊 デプロイメント情報:
            - コミット: ${{ github.sha }}
            - ブランチ: ${{ github.ref }}
            - 環境: Production
            - 時刻: ${{ github.event.head_commit.timestamp }}
            
            🔗 リンク:
            - 本番サイト: https://itdo-erp.com
            - 監視ダッシュボード: https://monitoring.itdo-erp.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # デプロイメント後の監視とロールバック準備
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Setup monitoring alerts
        run: |
          # CloudWatch アラーム設定
          aws cloudwatch put-metric-alarm \
            --alarm-name "ERP-HighErrorRate" \
            --alarm-description "ERP API error rate above 5%" \
            --metric-name ErrorRate \
            --namespace AWS/ApplicationELB \
            --statistic Average \
            --period 300 \
            --threshold 5.0 \
            --comparison-operator GreaterThanThreshold \
            --evaluation-periods 2 \
            --alarm-actions arn:aws:sns:ap-northeast-1:${{ secrets.AWS_ACCOUNT_ID }}:erp-alerts

          echo "✅ 本番監視アラート設定完了"

      - name: Create rollback script
        run: |
          # ロールバック用スクリプト生成
          cat > rollback.sh << 'EOF'
          #!/bin/bash
          # ITDO ERP緊急ロールバックスクリプト
          
          echo "🚨 緊急ロールバック開始..."
          
          # 前回のタスク定義に戻す
          aws ecs update-service \
            --cluster itdo-erp-production \
            --service itdo-erp-backend-production \
            --task-definition itdo-erp-backend-production:PREVIOUS
          
          aws ecs update-service \
            --cluster itdo-erp-production \
            --service itdo-erp-frontend-production \
            --task-definition itdo-erp-frontend-production:PREVIOUS
          
          echo "✅ ロールバック完了"
          EOF
          
          chmod +x rollback.sh

      - name: Upload rollback script
        uses: actions/upload-artifact@v4
        with:
          name: rollback-script
          path: rollback.sh

      - name: Final deployment report
        run: |
          echo "🎉 ITDO ERP本番デプロイメント完了レポート"
          echo "================================="
          echo "デプロイ時刻: $(date)"
          echo "コミットハッシュ: ${{ github.sha }}"
          echo "デプロイ環境: Production"
          echo "本番URL: https://itdo-erp.com"
          echo ""
          echo "📊 品質メトリクス:"
          echo "- セキュリティチェック: ${{ needs.security-and-quality.outputs.security-passed }}"
          echo "- 業務テスト: ${{ needs.erp-business-tests.outputs.test-passed }}"
          echo "- パフォーマンステスト: ${{ needs.performance-tests.outputs.performance-passed }}"
          echo ""
          echo "🔄 次回デプロイまでの監視とメンテナンスを継続してください。"

  # 失敗時の通知とクリーンアップ
  deployment-failure-handling:
    name: Handle Deployment Failure
    runs-on: ubuntu-latest
    needs: [security-and-quality, erp-business-tests, performance-tests, build-images, deploy-staging, deploy-production]
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ ITDO ERPデプロイメント失敗
            
            🔍 失敗詳細:
            - セキュリティチェック: ${{ needs.security-and-quality.result }}
            - 業務テスト: ${{ needs.erp-business-tests.result }}
            - パフォーマンステスト: ${{ needs.performance-tests.result }}
            - イメージビルド: ${{ needs.build-images.result }}
            - ステージングデプロイ: ${{ needs.deploy-staging.result }}
            - 本番デプロイ: ${{ needs.deploy-production.result }}
            
            🚨 緊急対応が必要です。ログを確認してください。
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Cleanup failed deployment artifacts
        run: |
          echo "🧹 失敗したデプロイメントのクリーンアップ..."
          # 必要に応じて失敗したリソースのクリーンアップ処理
          echo "クリーンアップ完了"