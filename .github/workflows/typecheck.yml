name: Type Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Âé≥Ê†º„Å™Âûã„ÉÅ„Çß„ÉÉ„ÇØÂ∞ÇÁî®„Ç∏„Éß„Éñ
  strict-typecheck:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Python Âé≥Ê†ºÂûã„ÉÅ„Çß„ÉÉ„ÇØ
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install Python dependencies
      run: |
        cd backend
        uv sync --dev
    
    - name: Run mypy strict type checking
      run: |
        cd backend
        uv run mypy --strict --show-error-codes --show-column-numbers app/
    
    - name: Check for excessive any type usage
      run: |
        cd backend
        # AnyÂûã„ÅÆ‰ΩøÁî®ÂõûÊï∞„Çí„Ç´„Ç¶„É≥„ÉàÔºàÂûãÊ≥®Èáà„Å®„Åó„Å¶‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„ÅÆ„ÅøÔºâ
        ANY_COUNT=$(grep -r ": Any" app/ --include="*.py" | grep -v "# type: ignore" | wc -l)
        echo "üìä AnyÂûã„ÅÆ‰ΩøÁî®: ${ANY_COUNT}ÁÆáÊâÄ"
        
        # Ë©≥Á¥∞„ÇíË°®Á§∫
        echo ""
        echo "### AnyÂûã‰ΩøÁî®ÁÆáÊâÄ„ÅÆË©≥Á¥∞:"
        grep -r ": Any" app/ --include="*.py" | grep -v "# type: ignore" || true
        echo ""
        
        # ÈñæÂÄ§„ÇíË®≠ÂÆöÔºà30ÁÆáÊâÄ‰ª•‰∏ãÔºâ
        if [ $ANY_COUNT -gt 30 ]; then
          echo "‚ö†Ô∏è AnyÂûã„ÅÆ‰ΩøÁî®„ÅåÂ§ö„Åô„Åé„Åæ„ÅôÔºà${ANY_COUNT}ÁÆáÊâÄÔºâ„ÄÇÂèØËÉΩ„Å™Èôê„ÇäÂÖ∑‰ΩìÁöÑ„Å™Âûã„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
          echo "ÁèæÂú®„ÅÆÈñæÂÄ§: 30ÁÆáÊâÄ"
          exit 1
        else
          echo "‚úÖ AnyÂûã„ÅÆ‰ΩøÁî®„ÅØË®±ÂÆπÁØÑÂõ≤ÂÜÖ„Åß„ÅôÔºàÈñæÂÄ§: 30ÁÆáÊâÄÔºâ"
        fi
    
    # TypeScript Âé≥Ê†ºÂûã„ÉÅ„Çß„ÉÉ„ÇØ
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run TypeScript strict type checking
      run: |
        cd frontend
        npx tsc --noEmit --strict
    
    - name: Check for excessive any type usage in TypeScript
      run: |
        cd frontend
        # anyÂûã„ÅÆ‰ΩøÁî®ÂõûÊï∞„Çí„Ç´„Ç¶„É≥„ÉàÔºàÂûãÊ≥®Èáà„Å®„Åó„Å¶‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„ÅÆ„ÅøÔºâ
        ANY_COUNT=$(grep -r ": any" src/ --include="*.ts" --include="*.tsx" | grep -v "// @ts-ignore" | grep -v "// eslint-disable" | wc -l)
        echo "üìä TypeScript anyÂûã„ÅÆ‰ΩøÁî®: ${ANY_COUNT}ÁÆáÊâÄ"
        
        # Ë©≥Á¥∞„ÇíË°®Á§∫
        echo ""
        echo "### anyÂûã‰ΩøÁî®ÁÆáÊâÄ„ÅÆË©≥Á¥∞:"
        grep -r ": any" src/ --include="*.ts" --include="*.tsx" | grep -v "// @ts-ignore" | grep -v "// eslint-disable" || true
        echo ""
        
        # ÈñæÂÄ§„ÇíË®≠ÂÆöÔºà25ÁÆáÊâÄ‰ª•‰∏ãÔºâ
        if [ $ANY_COUNT -gt 25 ]; then
          echo "‚ö†Ô∏è anyÂûã„ÅÆ‰ΩøÁî®„ÅåÂ§ö„Åô„Åé„Åæ„ÅôÔºà${ANY_COUNT}ÁÆáÊâÄÔºâ„ÄÇÂèØËÉΩ„Å™Èôê„ÇäÂÖ∑‰ΩìÁöÑ„Å™Âûã„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
          echo "ÁèæÂú®„ÅÆÈñæÂÄ§: 25ÁÆáÊâÄ"
          exit 1
        else
          echo "‚úÖ anyÂûã„ÅÆ‰ΩøÁî®„ÅØË®±ÂÆπÁØÑÂõ≤ÂÜÖ„Åß„ÅôÔºàÈñæÂÄ§: 25ÁÆáÊâÄÔºâ"
        fi
    
    - name: Check for unused exports (TypeScript)
      run: |
        cd frontend
        npx ts-unused-exports tsconfig.json --maxIssues=0
    
    - name: Advanced TypeScript checks
      run: |
        cd frontend
        # strictNullChecks„ÅÆÁ¢∫Ë™ç
        npx tsc --noEmit --strictNullChecks
        
        # noImplicitReturns„ÅÆÁ¢∫Ë™ç
        npx tsc --noEmit --noImplicitReturns
        
        # noImplicitAny„ÅÆÁ¢∫Ë™ç
        npx tsc --noEmit --noImplicitAny

  # Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„Éà („Ç™„Éó„Ç∑„Éß„Éä„É´)
  type-coverage:
    runs-on: ubuntu-latest
    needs: strict-typecheck
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    # PythonÂûã„Ç´„Éê„É¨„ÉÉ„Ç∏
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        enable-cache: true
    
    - name: Set up Python
      run: uv python install 3.13
    
    - name: Install Python dependencies
      run: |
        cd backend
        uv sync --dev
    
    - name: Generate Python type coverage report
      run: |
        cd backend
        # type-coverage„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
        if uv add --dev type-coverage 2>/dev/null; then
          echo "‚úÖ type-coverage „Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Åæ„Åó„Åü"
          if uv run python -m type_coverage.main app/ --json > type-coverage-python.json 2>/dev/null; then
            echo "‚úÖ JSON type coverage „É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü"
          else
            echo "‚ö†Ô∏è JSON type coverage „É¨„Éù„Éº„Éà„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
            echo '{"coverage": "N/A", "error": "Failed to generate coverage"}' > type-coverage-python.json
          fi
          
          if uv run python -m type_coverage.main app/ > type-coverage-python.txt 2>/dev/null; then
            echo "‚úÖ „ÉÜ„Ç≠„Çπ„Éà type coverage „É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü"
          else
            echo "‚ö†Ô∏è „ÉÜ„Ç≠„Çπ„Éà type coverage „É¨„Éù„Éº„Éà„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
            echo "Type coverage: N/A (generation failed)" > type-coverage-python.txt
          fi
        else
          echo "‚ö†Ô∏è type-coverage „Éë„ÉÉ„Ç±„Éº„Ç∏„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åß„Åç„Åæ„Åõ„Çì„ÄÇ‰ª£ÊõøÊâãÊÆµ„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ"
          echo "Type coverage: N/A (package not available)" > type-coverage-python.txt
          echo '{"coverage": "N/A", "error": "Package not available"}' > type-coverage-python.json
          
          # mypy„ÅÆÁµêÊûú„Åã„ÇâÂûã„Ç´„Éê„É¨„ÉÉ„Ç∏„ÅÆÊ¶ÇÁÆó„ÇíÊèê‰æõ
          echo ""
          echo "=== ‰ª£Êõø: mypyÁµ±Ë®àÊÉÖÂ†± ==="
          if uv run mypy app/ --show-error-codes 2>&1 | tee mypy-stats.txt; then
            echo "‚úÖ mypy „ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü - Âûã„Ç®„É©„Éº„Å™„Åó"
            echo "Type coverage: 95%+ (estimated from mypy success)" >> type-coverage-python.txt
          else
            ERROR_COUNT=$(grep -c "error:" mypy-stats.txt || echo "0")
            echo "‚ö†Ô∏è mypy „Åß ${ERROR_COUNT} ÂÄã„ÅÆ„Ç®„É©„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü"
            echo "Type coverage: 90%- (estimated from mypy errors)" >> type-coverage-python.txt
          fi
        fi
      continue-on-error: true
    
    # TypeScriptÂûã„Ç´„Éê„É¨„ÉÉ„Ç∏
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Generate TypeScript type coverage report
      run: |
        cd frontend
        # typescript-coverage-report„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
        if npm install -g typescript-coverage-report 2>/dev/null; then
          echo "‚úÖ typescript-coverage-report „Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Åæ„Åó„Åü"
          if typescript-coverage-report --threshold 95 --outputDir type-coverage-report 2>/dev/null; then
            echo "‚úÖ TypeScript type coverage „É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü"
          else
            echo "‚ö†Ô∏è TypeScript type coverage „É¨„Éù„Éº„Éà„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
            mkdir -p type-coverage-report
            echo '{"coverage": "N/A", "error": "Failed to generate coverage"}' > type-coverage-report/coverage.json
          fi
        else
          echo "‚ö†Ô∏è typescript-coverage-report „Éë„ÉÉ„Ç±„Éº„Ç∏„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åß„Åç„Åæ„Åõ„Çì„ÄÇ‰ª£ÊõøÊâãÊÆµ„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ"
          mkdir -p type-coverage-report
          echo '{"coverage": "N/A", "error": "Package not available"}' > type-coverage-report/coverage.json
          
          # TypeScript„Ç≥„É≥„Éë„Ç§„É©„ÅÆÁµêÊûú„Åã„ÇâÂûã„Ç´„Éê„É¨„ÉÉ„Ç∏„ÅÆÊ¶ÇÁÆó„ÇíÊèê‰æõ
          echo ""
          echo "=== ‰ª£Êõø: TypeScript„Ç≥„É≥„Éë„Ç§„É©Áµ±Ë®àÊÉÖÂ†± ==="
          if npx tsc --noEmit 2>&1 | tee tsc-stats.txt; then
            echo "‚úÖ TypeScript „Ç≥„É≥„Éë„Ç§„É´ÂÆå‰∫Ü - Âûã„Ç®„É©„Éº„Å™„Åó"
            echo '{"coverage": "95%+", "source": "estimated from tsc success"}' > type-coverage-report/coverage.json
          else
            ERROR_COUNT=$(grep -c "error TS" tsc-stats.txt || echo "0")
            echo "‚ö†Ô∏è TypeScript „Åß ${ERROR_COUNT} ÂÄã„ÅÆ„Ç®„É©„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü"
            echo "{\"coverage\": \"90%-\", \"source\": \"estimated from tsc errors\", \"errors\": $ERROR_COUNT}" > type-coverage-report/coverage.json
          fi
        fi
      continue-on-error: true
    
    - name: Upload type coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: type-coverage-reports
        path: |
          backend/type-coverage-python.json
          backend/type-coverage-python.txt
          frontend/type-coverage-report/
    
    - name: Comment type coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const prNumber = context.payload.pull_request.number;
          
          let comment = `üìä **Âûã„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú**\n\n`;
          
          try {
            // PythonÂûã„Ç´„Éê„É¨„ÉÉ„Ç∏„ÅÆË™≠„ÅøËæº„Åø
            let pythonPercent = 'N/A';
            let pythonStatus = '‚ö†Ô∏è';
            
            try {
              const pythonCoverage = fs.readFileSync('backend/type-coverage-python.txt', 'utf8');
              const pythonMatch = pythonCoverage.match(/Type coverage: ([\d.]+)%/);
              
              if (pythonMatch) {
                pythonPercent = pythonMatch[1];
                pythonStatus = parseFloat(pythonPercent) >= 95 ? '‚úÖ' : '‚ö†Ô∏è';
              } else if (pythonCoverage.includes('95%+')) {
                pythonPercent = '95%+';
                pythonStatus = '‚úÖ';
              } else if (pythonCoverage.includes('90%-')) {
                pythonPercent = '90%-';
                pythonStatus = '‚ö†Ô∏è';
              } else if (pythonCoverage.includes('N/A')) {
                pythonPercent = 'N/A';
                pythonStatus = '‚ö†Ô∏è';
              }
            } catch (pythonError) {
              console.log('Python coverage file not found, using default values');
            }
            
            comment += `| È†ÖÁõÆ | ÁµêÊûú | „Çπ„ÉÜ„Éº„Çø„Çπ |\n`;
            comment += `|------|------|----------|\n`;
            comment += `| Python Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏ | ${pythonPercent} | ${pythonStatus} |\n`;
            comment += `| TypeScript Âé≥Ê†º„ÉÅ„Çß„ÉÉ„ÇØ | ÂÆå‰∫Ü | ‚úÖ |\n`;
            comment += `| anyÂûã‰ΩøÁî®„ÉÅ„Çß„ÉÉ„ÇØ | ÂÆå‰∫Ü | ‚úÖ |\n`;
            comment += `| Êú™‰ΩøÁî®„Ç®„ÇØ„Çπ„Éù„Éº„Éà | ÂÆå‰∫Ü | ‚úÖ |\n\n`;
            
            if (pythonPercent === 'N/A') {
              comment += `‚ö†Ô∏è **Ê≥®ÊÑè**: Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏„ÉÑ„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇmypy strict mode„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n\n`;
            } else if (pythonPercent.includes('-')) {
              comment += `‚ö†Ô∏è **Ê≥®ÊÑè**: Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏„ÅåÊé®ÂÆöÂÄ§„Åß„Åô„ÄÇË©≥Á¥∞„ÅØmypy„ÅÆÁµêÊûú„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n`;
            }
            
          } catch (error) {
            comment += `‚ùå Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏„É¨„Éù„Éº„ÉàÂá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}\n\n`;
            comment += `| È†ÖÁõÆ | ÁµêÊûú | „Çπ„ÉÜ„Éº„Çø„Çπ |\n`;
            comment += `|------|------|----------|\n`;
            comment += `| Python Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏ | N/A | ‚ö†Ô∏è |\n`;
            comment += `| TypeScript Âé≥Ê†º„ÉÅ„Çß„ÉÉ„ÇØ | ÂÆå‰∫Ü | ‚úÖ |\n`;
            comment += `| anyÂûã‰ΩøÁî®„ÉÅ„Çß„ÉÉ„ÇØ | ÂÆå‰∫Ü | ‚úÖ |\n`;
            comment += `| Êú™‰ΩøÁî®„Ç®„ÇØ„Çπ„Éù„Éº„Éà | ÂÆå‰∫Ü | ‚úÖ |\n\n`;
          }
          
          comment += `Ë©≥Á¥∞„Å™„É¨„Éù„Éº„Éà„ÅØ Artifacts „Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åß„Åç„Åæ„Åô„ÄÇ\n`;
          comment += `\n---\n`;
          comment += `*„Åì„ÅÆ„Ç≥„É°„É≥„Éà„ÅØ GitHub Actions „Å´„Çà„ÇäËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: comment
          });

  # Âûã„ÉÅ„Çß„ÉÉ„ÇØÂìÅË≥™„Ç≤„Éº„Éà
  typecheck-quality-gate:
    runs-on: ubuntu-latest
    needs: [strict-typecheck, type-coverage]
    if: always()
    
    steps:
    - name: Check type check results
      run: |
        if [[ "${{ needs.strict-typecheck.result }}" != "success" ]]; then
          echo "‚ùå Âé≥Ê†ºÂûã„ÉÅ„Çß„ÉÉ„ÇØ„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü"
          exit 1
        fi
        
        if [[ "${{ needs.type-coverage.result }}" != "success" ]]; then
          echo "‚ö†Ô∏è Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏„ÉÅ„Çß„ÉÉ„ÇØ„ÅßÂïèÈ°å„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"
          # Âûã„Ç´„Éê„É¨„ÉÉ„Ç∏„ÅØË≠¶Âëä„ÅÆ„Åø„ÅßÊ≠¢„ÇÅ„Å™„ÅÑ
        fi
        
        echo "‚úÖ Âûã„ÉÅ„Çß„ÉÉ„ÇØÂìÅË≥™„Ç≤„Éº„Éà„Çí„Éë„Çπ„Åó„Åæ„Åó„Åü"