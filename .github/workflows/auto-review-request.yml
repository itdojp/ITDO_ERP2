name: Auto Review Request

# Note: This workflow is now supplementary to GitHub's native CODEOWNERS feature
# CODEOWNERS file (.github/CODEOWNERS) provides automatic reviewer assignment
# This workflow handles additional labeling and PR management tasks

on:
  pull_request:
    types: [opened, ready_for_review]

jobs:
  auto-pr-setup:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Auto-assign labels and setup PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const prAuthor = context.payload.pull_request.user.login;
          
          // Note: Reviewers are now automatically assigned via CODEOWNERS file
          // This section focuses on automatic labeling and PR management
          
          try {
            
            // 変更ファイルに基づいてラベルを追加
            const { data: files } = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number: prNumber
            });
            
            const labels = [];
            const hasBackendChanges = files.some(file => file.filename.startsWith('backend/'));
            const hasFrontendChanges = files.some(file => file.filename.startsWith('frontend/'));
            const hasInfraChanges = files.some(file => file.filename.startsWith('infra/') || file.filename.includes('docker') || file.filename.includes('compose'));
            const hasDocsChanges = files.some(file => file.filename.startsWith('docs/') || file.filename.endsWith('.md'));
            const hasTestChanges = files.some(file => file.filename.includes('test') || file.filename.startsWith('e2e/'));
            
            if (hasBackendChanges) labels.push('backend');
            if (hasFrontendChanges) labels.push('frontend');
            if (hasInfraChanges) labels.push('infrastructure');
            if (hasDocsChanges) labels.push('documentation');
            if (hasTestChanges) labels.push('testing');
            
            // PRタイトルにWIPが含まれている場合
            if (context.payload.pull_request.title.toLowerCase().includes('wip')) {
              labels.push('work-in-progress');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: prNumber,
                labels: labels
              });
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }
            
            // 成功コメントを追加
            const comment = `🤖 **PR自動設定完了**
            
✅ レビュワー: CODEOWNERSファイルに基づいて自動割り当て
${labels.length > 0 ? `✅ ラベル追加: ${labels.join(', ')}` : ''}

**次のステップ:**
1. CODEOWNERSで指定されたレビュワーによるレビューをお待ちください
2. レビュー指摘事項があれば修正してください  
3. 全てのチェックが通ったらマージ可能です

**CODEOWNERSについて:**
- ファイル変更に基づいて適切なチームメンバーが自動的にレビュワーとして割り当てられます
- 詳細は [CODEOWNERS ファイル](/.github/CODEOWNERS) をご確認ください

---
*このコメントは GitHub Actions により自動生成されました*`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: comment
            });
            
          } catch (error) {
            console.error('Error in auto-review-request:', error);
            
            // エラーコメントを追加
            const errorComment = `❌ **PR自動設定でエラーが発生しました**
            
エラー内容: ${error.message}

**対処方法:**
- CODEOWNERSファイルに基づくレビュワー割り当ては正常に動作します
- ラベルの自動追加でエラーが発生しました
- 必要に応じて手動でラベルを追加してください

---
*このコメントは GitHub Actions により自動生成されました*`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: errorComment
            });
          }