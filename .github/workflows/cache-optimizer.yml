name: Optimized Cache Strategy
on: [push, pull_request]

permissions:
  contents: read
  pull-requests: read
  checks: read

jobs:
  setup-cache:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Backend Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
            backend/.mypy_cache
            backend/.pytest_cache
            backend/.ruff_cache
          key: backend-${{ runner.os }}-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            backend-${{ runner.os }}-

      - name: Frontend Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            frontend/node_modules
            frontend/.next/cache
          key: frontend-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-${{ runner.os }}-

      - name: Docker Layer Cache
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Measure Cache Hit Rate
        run: |
          echo "Cache statistics:"
          echo "- Backend cache size: $(du -sh ~/.cache/uv 2>/dev/null || echo '0')"
          echo "- Frontend cache size: $(du -sh frontend/node_modules 2>/dev/null || echo '0')"
          echo "- Docker cache size: $(docker system df --format 'table {{.Type}}\t{{.Size}}')"