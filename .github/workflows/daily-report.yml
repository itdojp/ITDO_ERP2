name: ITDO_ERP2 Daily Processing Report

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9:00 AM UTC
  workflow_dispatch:      # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Generate ITDO_ERP2 Daily Report
        uses: actions/github-script@v7
        with:
          script: |
            const now = new Date();
            const oneDayAgo = new Date(now.getTime() - 24*60*60*1000);
            const oneWeekAgo = new Date(now.getTime() - 7*24*60*60*1000);
            
            console.log(`Generating ITDO_ERP2 report for: ${oneDayAgo.toISOString()} to ${now.toISOString()}`);
            
            // Fetch processed issues
            const processed = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-completed',
              since: oneDayAgo.toISOString(),
              state: 'all',
              per_page: 100
            });
            
            // Fetch failed issues
            const failed = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-failed',
              since: oneDayAgo.toISOString(),
              state: 'all',
              per_page: 100
            });
            
            // Fetch waiting issues
            const waiting = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-waiting',
              state: 'open',
              per_page: 100
            });
            
            // Calculate processing by type for ITDO_ERP2
            const processingTypes = {
              backend: 0,
              frontend: 0,
              testing: 0,
              infrastructure: 0,
              database: 0,
              security: 0,
              general: 0
            };
            
            // Calculate ERP domain distribution
            const erpDomains = {
              'erp-core': 0,
              'user-management': 0,
              'organization-mgmt': 0,
              'project-mgmt': 0,
              'api-design': 0,
              'ui-ux': 0
            };
            
            processed.data.forEach(issue => {
              const labels = issue.labels.map(l => l.name);
              
              // Processing type analysis
              if (labels.includes('claude-code-backend')) processingTypes.backend++;
              else if (labels.includes('claude-code-frontend')) processingTypes.frontend++;
              else if (labels.includes('claude-code-testing')) processingTypes.testing++;
              else if (labels.includes('claude-code-infrastructure')) processingTypes.infrastructure++;
              else if (labels.includes('claude-code-database')) processingTypes.database++;
              else if (labels.includes('claude-code-security')) processingTypes.security++;
              else processingTypes.general++;
              
              // ERP domain analysis
              Object.keys(erpDomains).forEach(domain => {
                if (labels.includes(domain)) erpDomains[domain]++;
              });
            });
            
            // Calculate metrics
            const totalProcessed = processed.data.length;
            const totalFailed = failed.data.length;
            const totalAttempted = totalProcessed + totalFailed;
            const successRate = totalAttempted > 0 ? (totalProcessed / totalAttempted * 100).toFixed(1) : 0;
            
            // Weekly comparison
            const weeklyProcessed = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-code-completed',
              since: oneWeekAgo.toISOString(),
              state: 'all',
              per_page: 100
            });
            
            const avgDailyProcessing = (weeklyProcessed.data.length / 7).toFixed(1);
            
            // Check milestone progress
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 10
            });
            
            // Generate report content
            const reportDate = now.toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            });
            
            const report = `# üìä ITDO_ERP2 Daily Processing Report
            
            **Date**: ${reportDate}
            **Project**: ITDO ERP System v2 - Modern Enterprise Resource Planning
            **Report Period**: Last 24 hours
            
            ## üéØ Executive Summary
            
            | Metric | Value | Target |
            |--------|-------|--------|
            | ‚úÖ Successfully Processed | ${totalProcessed} | - |
            | ‚ùå Failed Processing | ${totalFailed} | <5% |
            | ‚è≥ Currently Waiting | ${waiting.data.length} | <10 |
            | üéØ Success Rate | ${successRate}% | >90% |
            | üìä 7-Day Average | ${avgDailyProcessing} issues/day | - |
            
            ## üèóÔ∏è Technology Stack Processing
            
            | Component | Count | Technology | Standards |
            |-----------|-------|------------|-----------|
            | Backend | ${processingTypes.backend} | Python 3.13, FastAPI, SQLAlchemy | TDD, async/await, >80% coverage |
            | Frontend | ${processingTypes.frontend} | React 18, TypeScript 5, Vite | Strict typing, responsive design |
            | Database | ${processingTypes.database} | PostgreSQL 15, Alembic, Redis 7 | Migration control, optimization |
            | Testing | ${processingTypes.testing} | pytest, vitest, coverage | TDD compliance, integration tests |
            | Infrastructure | ${processingTypes.infrastructure} | GitHub Actions, Podman | CI/CD optimization, hybrid setup |
            | Security | ${processingTypes.security} | Keycloak, OAuth2/OIDC | Authentication, authorization |
            | General | ${processingTypes.general} | Cross-component | Project standards compliance |
            
            ## üè¢ ERP Domain Analysis
            
            | Domain | Count | Focus Area |
            |--------|-------|------------|
            | Core ERP | ${erpDomains['erp-core']} | Fundamental ERP functionality |
            | User Management | ${erpDomains['user-management']} | Authentication, roles, permissions |
            | Organization | ${erpDomains['organization-mgmt']} | Companies, departments, hierarchy |
            | Project Management | ${erpDomains['project-mgmt']} | Tasks, milestones, workflows |
            | API Design | ${erpDomains['api-design']} | RESTful APIs, documentation |
            | UI/UX | ${erpDomains['ui-ux']} | User interface, experience |
            
            ## üéØ Sprint Progress
            ${milestones.data.length > 0 
              ? milestones.data.slice(0, 3).map(m => {
                  const progress = m.closed_issues > 0 ? ((m.closed_issues / (m.open_issues + m.closed_issues)) * 100).toFixed(0) : 0;
                  return `- **${m.title}**: ${m.open_issues} open / ${m.closed_issues} closed (${progress}% complete)`;
                }).join('\n')
              : '*No active milestones - Consider creating sprint milestones for better tracking*'
            }
            
            ## üìã Detailed Results
            
            ### ‚úÖ Successfully Processed (${totalProcessed})
            ${totalProcessed > 0 
              ? processed.data.slice(0, 10).map(i => {
                  const labels = i.labels.map(l => l.name);
                  const type = labels.find(l => l.startsWith('claude-code-') && !['claude-code-completed', 'claude-code-processing'].includes(l))?.replace('claude-code-', '') || 'general';
                  const domain = labels.find(l => ['erp-core', 'user-management', 'organization-mgmt', 'project-mgmt', 'api-design', 'ui-ux'].includes(l)) || '';
                  return `- [#${i.number}](${i.html_url}): ${i.title} \`[${type}${domain ? ' | ' + domain : ''}]\``;
                }).join('\n') + (totalProcessed > 10 ? `\n- ... and ${totalProcessed - 10} more` : '')
              : '*No issues processed in the last 24 hours*'
            }
            
            ### ‚ùå Failed Processing (${totalFailed})
            ${totalFailed > 0
              ? failed.data.map(i => `- [#${i.number}](${i.html_url}): ${i.title}`).join('\n')
              : '*No failures in the last 24 hours* üéâ'
            }
            
            ### ‚è≥ Currently Waiting (${waiting.data.length})
            ${waiting.data.length > 0
              ? waiting.data.slice(0, 5).map(i => `- [#${i.number}](${i.html_url}): ${i.title}`).join('\n') +
                (waiting.data.length > 5 ? `\n- ... and ${waiting.data.length - 5} more` : '')
              : '*No issues waiting for labels*'
            }
            
            ## üîç ITDO_ERP2 Quality Metrics
            
            - **üìö TDD Compliance**: All processed issues follow Test-Driven Development
            - **üîí Type Safety**: Strict TypeScript and mypy enforcement active
            - **üìä Test Coverage**: Maintaining >80% coverage requirement
            - **‚ö° Performance**: API response time <200ms target
            - **üåê Technology Stack**: Python 3.13 + FastAPI + React 18 + TypeScript 5
            - **üóÑÔ∏è Data Layer**: PostgreSQL 15 + Redis 7 with hybrid development
            
            ## üí° Recommendations
            
            ${waiting.data.length > 10 
              ? '‚ö†Ô∏è **High number of waiting issues** - Consider reviewing and adding appropriate processing labels.'
              : ''
            }
            ${successRate < 90 && totalAttempted > 0
              ? '‚ö†Ô∏è **Success rate below 90%** - Review failed issues for common patterns.'
              : ''
            }
            ${totalProcessed === 0
              ? '‚ÑπÔ∏è **No processing activity** - Check if the workflow is properly configured.'
              : ''
            }
            ${processingTypes.testing < (processingTypes.backend + processingTypes.frontend) / 2
              ? 'üìù **Testing gap detected** - Consider adding more testing issues to maintain TDD compliance.'
              : ''
            }
            ${Object.values(erpDomains).every(count => count === 0) && totalProcessed > 0
              ? 'üè¢ **ERP domain classification needed** - Consider adding ERP-specific labels for better tracking.'
              : ''
            }
            
            ## üöÄ Development Focus Areas
            
            Based on processing patterns (last 24h):
            ${Object.entries(processingTypes)
              .filter(([_, count]) => count > 0)
              .sort(([_, a], [__, b]) => b - a)
              .slice(0, 3)
              .map(([type, count]) => `- **${type.charAt(0).toUpperCase() + type.slice(1)}**: ${count} issues (${totalProcessed > 0 ? (count/totalProcessed*100).toFixed(0) : 0}% of total)`)
              .join('\n') || '*No processing activity to analyze*'
            }
            
            ## üè¢ ERP Module Activity
            
            ${Object.entries(erpDomains)
              .filter(([_, count]) => count > 0)
              .sort(([_, a], [__, b]) => b - a)
              .map(([domain, count]) => `- **${domain.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}**: ${count} issues`)
              .join('\n') || '*No ERP-specific activity detected*'
            }
            
            ---
            
            *This report was automatically generated by the ITDO_ERP2 Label-Based Processing System.*  
            *Following enterprise standards: TDD, Type Safety, Performance Optimization*  
            *Next report: Tomorrow at 9:00 AM UTC*
            `;
            
            // Create report issue
            const reportIssue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìä ITDO_ERP2 Daily Report - ${now.toLocaleDateString()}`,
              body: report,
              labels: ['erp-core', 'report', 'project-management']
            });
            
            console.log(`ITDO_ERP2 report created: ${reportIssue.data.html_url}`);
            
            // Close previous reports older than 7 days
            const oldReports = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'report,project-management',
              state: 'open',
              per_page: 100
            });
            
            for (const oldReport of oldReports.data) {
              const createdDate = new Date(oldReport.created_at);
              if (now.getTime() - createdDate.getTime() > 7*24*60*60*1000) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: oldReport.number,
                  state: 'closed',
                  state_reason: 'completed'
                });
                console.log(`Closed old ITDO_ERP2 report: #${oldReport.number}`);
              }
            }