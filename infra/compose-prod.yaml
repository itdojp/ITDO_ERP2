version: '3.8'

services:
  # NGINX Reverse Proxy & Load Balancer
  nginx:
    image: docker.io/nginx:alpine
    container_name: itdo-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - itdo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend Application
  backend:
    image: ghcr.io/itdojp/itdo_erp2-backend:latest
    container_name: itdo-backend-prod
    environment:
      - DATABASE_URL=postgresql://itdo_user:${POSTGRES_PASSWORD}@postgres:5432/itdo_erp
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - CORS_ORIGINS=https://itdo-erp.com,https://www.itdo-erp.com
      - LOG_LEVEL=INFO
      - WORKERS=4
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - itdo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Application
  frontend:
    image: ghcr.io/itdojp/itdo_erp2-frontend:latest
    container_name: itdo-frontend-prod
    environment:
      - REACT_APP_API_URL=https://api.itdo-erp.com/api/v1
      - REACT_APP_ENVIRONMENT=production
      - NODE_ENV=production
    ports:
      - "3000:8080"
    networks:
      - itdo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: docker.io/postgres:15-alpine
    container_name: itdo-postgres-prod
    environment:
      POSTGRES_DB: itdo_erp
      POSTGRES_USER: itdo_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./postgres/postgres-prod.conf:/etc/postgresql/postgresql.conf:ro
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - itdo-network
    restart: unless-stopped
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U itdo_user -d itdo_erp"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Redis Cache
  redis:
    image: docker.io/redis:7-alpine
    container_name: itdo-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - itdo-network
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --loglevel notice
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: itdo-keycloak-prod
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_HOSTNAME: auth.itdo-erp.com
      KC_PROXY: edge
      KC_HTTP_ENABLED: true
      KC_HTTPS_PORT: 8443
    ports:
      - "8080:8080"
      - "8443:8443"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - itdo-network
    restart: unless-stopped
    command: start --optimized
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    volumes:
      - keycloak_data:/opt/keycloak/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Backup Service
  db-backup:
    image: docker.io/postgres:15-alpine
    container_name: itdo-db-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./backup-prod.sh:/usr/local/bin/backup-prod.sh:ro
    networks:
      - itdo-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        chmod +x /usr/local/bin/backup-prod.sh &&
        while true; do
          /usr/local/bin/backup-prod.sh
          sleep 3600
        done
      "
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Aggregation
  fluentd:
    image: docker.io/fluent/fluentd:v1.16-debian-1
    container_name: itdo-fluentd-prod
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_logs:/var/log/fluentd
    networks:
      - itdo-network
    restart: unless-stopped
    ports:
      - "24224:24224"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local
  keycloak_data:
    driver: local
  fluentd_logs:
    driver: local

networks:
  itdo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16