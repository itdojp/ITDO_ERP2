# Global Load Balancing System
# Intelligent traffic distribution with geographic routing and health-based failover

apiVersion: v1
kind: Namespace
metadata:
  name: global-load-balancing
  labels:
    name: global-load-balancing
    glb.itdo-erp.com/system: "true"
    traffic-management: "global"

---
# Global Load Balancer Controller
apiVersion: apps/v1
kind: Deployment
metadata:
  name: global-load-balancer-controller
  namespace: global-load-balancing
  labels:
    app.kubernetes.io/name: global-load-balancer-controller
    glb.component: "controller"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: global-load-balancer-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: global-load-balancer-controller
        glb.component: "controller"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: global-load-balancer
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: glb-controller
        image: itdo-erp/global-load-balancer:v2.1.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http-api
          containerPort: 8080
        - name: grpc-api
          containerPort: 9090
        - name: health
          containerPort: 8081
        command:
        - /glb-controller
        args:
        - --config=/config/glb-config.yaml
        - --policies=/config/routing-policies.yaml
        - --regions=/config/regions.yaml
        - --health-check-config=/config/health-checks.yaml
        - --api-port=8080
        - --grpc-port=9090
        - --health-port=8081
        - --metrics-enabled=true
        - --tracing-enabled=true
        env:
        - name: GLB_MODE
          value: "production"  # development, staging, production
        - name: FAILOVER_STRATEGY
          value: "intelligent"  # round-robin, weighted, intelligent, latency-based
        - name: HEALTH_CHECK_INTERVAL
          value: "30s"
        - name: DNS_PROVIDER
          value: "route53"  # route53, cloudflare, google-dns
        - name: GLOBAL_ANYCAST
          value: "enabled"
        - name: PROMETHEUS_URL
          value: "http://prometheus-server.monitoring.svc.cluster.local:9090"
        - name: JAEGER_AGENT_HOST
          value: "jaeger-agent.monitoring.svc.cluster.local"
        - name: AWS_REGION
          value: "us-east-1"
        - name: ROUTE53_HOSTED_ZONE_ID
          valueFrom:
            secretKeyRef:
              name: dns-credentials
              key: hosted-zone-id
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: secret-access-key
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: tls-certs
          mountPath: /certs
          readOnly: true
        - name: geo-database
          mountPath: /geo
          readOnly: true
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 1Gi
      - name: traffic-analyzer
        image: itdo-erp/traffic-analyzer:v1.3.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: analyzer-api
          containerPort: 8082
        command:
        - /traffic-analyzer
        args:
        - --config=/config/analyzer-config.yaml
        - --prometheus-url=http://prometheus-server.monitoring.svc.cluster.local:9090
        - --analysis-interval=60s
        - --prediction-horizon=300s
        - --api-port=8082
        env:
        - name: ML_MODELS_PATH
          value: "/models"
        - name: PREDICTION_ENGINE
          value: "tensorflow"  # tensorflow, pytorch, prophet
        - name: REAL_TIME_ANALYSIS
          value: "enabled"
        - name: TRAFFIC_PATTERNS_LEARNING
          value: "enabled"
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: ml-models
          mountPath: /models
          readOnly: true
        - name: analysis-cache
          mountPath: /cache
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
            nvidia.com/gpu: "1"
          requests:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: config
        configMap:
          name: global-load-balancer-config
      - name: tls-certs
        secret:
          secretName: glb-tls-certificates
      - name: geo-database
        configMap:
          name: geo-ip-database
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: analysis-cache
        emptyDir: {}

---
# Health Check Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: global-health-checker
  namespace: global-load-balancing
  labels:
    app.kubernetes.io/name: global-health-checker
    glb.component: "health-check"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: global-health-checker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: global-health-checker
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      serviceAccountName: global-health-checker
      containers:
      - name: health-checker
        image: itdo-erp/global-health-checker:v1.4.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http-metrics
          containerPort: 8080
        - name: api
          containerPort: 8081
        command:
        - /health-checker
        args:
        - --config=/config/health-check-config.yaml
        - --endpoints=/config/endpoints.yaml
        - --check-interval=30s
        - --timeout=10s
        - --parallel-checks=10
        - --api-port=8081
        - --metrics-port=8080
        env:
        - name: CHECK_METHODS
          value: "http,tcp,grpc,dns"
        - name: SYNTHETIC_MONITORING
          value: "enabled"
        - name: GEOGRAPHIC_CHECKS
          value: "enabled"
        - name: ALERTING_ENABLED
          value: "true"
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: notification-secrets
              key: slack-webhook-url
        volumeMounts:
        - name: health-config
          mountPath: /config
          readOnly: true
        - name: check-cache
          mountPath: /cache
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: health-config
        configMap:
          name: health-check-config
      - name: check-cache
        emptyDir: {}

---
# DNS Management Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dns-management-service
  namespace: global-load-balancing
  labels:
    app.kubernetes.io/name: dns-management-service
    glb.component: "dns-management"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: dns-management-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dns-management-service
    spec:
      serviceAccountName: dns-manager
      containers:
      - name: dns-manager
        image: itdo-erp/dns-manager:v1.2.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        command:
        - /dns-manager
        args:
        - --config=/config/dns-config.yaml
        - --providers=/config/dns-providers.yaml
        - --records-template=/config/dns-records.yaml
        - --update-interval=60s
        - --api-port=8080
        env:
        - name: DNS_PROVIDERS
          value: "route53,cloudflare"
        - name: TTL_OPTIMIZATION
          value: "enabled"
        - name: GEOLOCATION_ROUTING
          value: "enabled"
        - name: LATENCY_ROUTING
          value: "enabled"
        - name: HEALTH_CHECK_INTEGRATION
          value: "enabled"
        - name: DNSSEC_ENABLED
          value: "true"
        volumeMounts:
        - name: dns-config
          mountPath: /config
          readOnly: true
        - name: dns-cache
          mountPath: /cache
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: dns-config
        configMap:
          name: dns-management-config
      - name: dns-cache
        emptyDir: {}

---
# Traffic Analytics Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-analytics-service
  namespace: global-load-balancing
  labels:
    app.kubernetes.io/name: traffic-analytics-service
    glb.component: "analytics"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: traffic-analytics-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: traffic-analytics-service
    spec:
      containers:
      - name: traffic-analytics
        image: itdo-erp/traffic-analytics:v1.1.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        - name: websocket
          containerPort: 8081
        command:
        - /traffic-analytics
        args:
        - --config=/config/analytics-config.yaml
        - --dashboards=/config/dashboards.yaml
        - --real-time-enabled=true
        - --historical-retention=90d
        - --api-port=8080
        - --websocket-port=8081
        env:
        - name: ANALYTICS_ENGINE
          value: "clickhouse"  # elasticsearch, clickhouse, bigquery
        - name: REAL_TIME_PROCESSING
          value: "enabled"
        - name: GEO_ANALYTICS
          value: "enabled"
        - name: USER_JOURNEY_TRACKING
          value: "enabled"
        - name: CLICKHOUSE_URL
          value: "http://clickhouse.analytics.svc.cluster.local:8123"
        volumeMounts:
        - name: analytics-config
          mountPath: /config
          readOnly: true
        - name: analytics-cache
          mountPath: /cache
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
      volumes:
      - name: analytics-config
        configMap:
          name: traffic-analytics-config
      - name: analytics-cache
        emptyDir: {}

---
# Global Anycast Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: global-anycast-service
  namespace: global-load-balancing
  labels:
    app.kubernetes.io/name: global-anycast-service
    glb.component: "anycast"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: global-anycast-service
  template:
    metadata:
      labels:
        app.kubernetes.io/name: global-anycast-service
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: anycast-manager
        image: itdo-erp/anycast-manager:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        - name: bgp
          containerPort: 179
          protocol: TCP
        command:
        - /anycast-manager
        args:
        - --config=/config/anycast-config.yaml
        - --bgp-config=/config/bgp-config.yaml
        - --anycast-ips=/config/anycast-ips.yaml
        - --api-port=8080
        env:
        - name: BGP_ENABLED
          value: "true"
        - name: ANYCAST_SUBNETS
          value: "203.0.113.0/24,198.51.100.0/24"
        - name: BGP_AS_NUMBER
          value: "65001"
        - name: BGP_ROUTER_ID
          value: "203.0.113.1"
        securityContext:
          privileged: true
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
        volumeMounts:
        - name: anycast-config
          mountPath: /config
          readOnly: true
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: anycast-config
        configMap:
          name: anycast-configuration

---
# Configuration ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: global-load-balancer-config
  namespace: global-load-balancing
data:
  glb-config.yaml: |
    global_load_balancer:
      mode: "production"
      
      routing:
        algorithm: "intelligent"  # round-robin, weighted, latency-based, intelligent
        health_check_weight: 0.4
        latency_weight: 0.3
        capacity_weight: 0.2
        cost_weight: 0.1
        
      regions:
        us_east_1:
          endpoints:
            - "https://api-us-east-1.itdo-erp.com"
            - "https://api-us-east-1b.itdo-erp.com"
          weight: 40
          health_check_url: "https://api-us-east-1.itdo-erp.com/health"
          capacity: 1000  # RPS
          latency_target: 50  # ms
          
        us_west_2:
          endpoints:
            - "https://api-us-west-2.itdo-erp.com"
          weight: 30
          health_check_url: "https://api-us-west-2.itdo-erp.com/health"
          capacity: 800
          latency_target: 60
          
        eu_west_1:
          endpoints:
            - "https://api-eu-west-1.itdo-erp.com"
          weight: 20
          health_check_url: "https://api-eu-west-1.itdo-erp.com/health"
          capacity: 600
          latency_target: 70
          
        ap_southeast_1:
          endpoints:
            - "https://api-ap-southeast-1.itdo-erp.com"
          weight: 10
          health_check_url: "https://api-ap-southeast-1.itdo-erp.com/health"
          capacity: 400
          latency_target: 80
          
      failover:
        enabled: true
        strategy: "intelligent"
        health_check_failures: 3
        timeout: "30s"
        fallback_region: "us_east_1"
        
      performance:
        connection_pooling: true
        keep_alive: true
        compression: true
        http2_enabled: true
        
      security:
        ddos_protection: true
        rate_limiting: true
        geo_blocking: false
        ssl_termination: true
        
      monitoring:
        metrics_enabled: true
        detailed_logging: true
        tracing_enabled: true
        real_time_dashboards: true

  routing-policies.yaml: |
    routing_policies:
      - name: "geographic_routing"
        type: "geographic"
        rules:
          - source_region: "north_america"
            target_regions: ["us_east_1", "us_west_2"]
            preference: ["us_east_1", "us_west_2"]
            
          - source_region: "europe"
            target_regions: ["eu_west_1", "us_east_1"]
            preference: ["eu_west_1", "us_east_1"]
            
          - source_region: "asia_pacific"
            target_regions: ["ap_southeast_1", "us_west_2"]
            preference: ["ap_southeast_1", "us_west_2"]
            
      - name: "latency_based_routing"
        type: "latency"
        rules:
          - latency_threshold: 100  # ms
            action: "prefer_closest"
            fallback: "next_closest"
            
      - name: "capacity_based_routing"
        type: "capacity"
        rules:
          - capacity_threshold: 80  # percentage
            action: "distribute_load"
            overflow_targets: ["us_east_1", "us_west_2"]
            
      - name: "business_hours_routing"
        type: "time_based"
        rules:
          - time_range: "09:00-17:00"
            timezone: "America/New_York"
            target_regions: ["us_east_1"]
            weight_multiplier: 1.5
            
          - time_range: "09:00-17:00" 
            timezone: "Europe/London"
            target_regions: ["eu_west_1"]
            weight_multiplier: 1.5

  regions.yaml: |
    regions:
      - name: "us_east_1"
        display_name: "US East (N. Virginia)"
        coordinates: [38.9072, -77.0369]
        timezone: "America/New_York"
        cloud_provider: "aws"
        datacenter_tier: "tier1"
        network_capacity: "10Gbps"
        storage_capacity: "100TB"
        compute_capacity: "1000 vCPUs"
        
      - name: "us_west_2"
        display_name: "US West (Oregon)"
        coordinates: [45.5152, -122.6784]
        timezone: "America/Los_Angeles"
        cloud_provider: "aws"
        datacenter_tier: "tier1"
        network_capacity: "10Gbps"
        storage_capacity: "80TB"
        compute_capacity: "800 vCPUs"
        
      - name: "eu_west_1"
        display_name: "Europe (Ireland)"
        coordinates: [53.3498, -6.2603]
        timezone: "Europe/Dublin"
        cloud_provider: "aws"
        datacenter_tier: "tier2"
        network_capacity: "5Gbps"
        storage_capacity: "60TB"
        compute_capacity: "600 vCPUs"
        
      - name: "ap_southeast_1"
        display_name: "Asia Pacific (Singapore)"
        coordinates: [1.3521, 103.8198]
        timezone: "Asia/Singapore"
        cloud_provider: "aws"
        datacenter_tier: "tier2"
        network_capacity: "5Gbps"
        storage_capacity: "40TB"
        compute_capacity: "400 vCPUs"

  health-checks.yaml: |
    health_checks:
      - name: "api_health_check"
        type: "http"
        interval: "30s"
        timeout: "10s"
        retries: 3
        expected_status: 200
        path: "/health"
        headers:
          User-Agent: "ITDO-ERP-GLB/1.0"
          
      - name: "api_deep_health_check"
        type: "http"
        interval: "60s"
        timeout: "15s"
        retries: 2
        expected_status: 200
        path: "/health/deep"
        expected_body_contains: '"status":"healthy"'
        
      - name: "database_connectivity_check"
        type: "http"
        interval: "45s"
        timeout: "20s"
        retries: 2
        expected_status: 200
        path: "/health/database"
        
      - name: "synthetic_user_journey"
        type: "synthetic"
        interval: "300s"  # 5 minutes
        timeout: "60s"
        script: |
          steps:
            - action: "GET"
              url: "/api/v1/health"
              expected_status: 200
            - action: "POST"
              url: "/api/v1/auth/login"
              body: '{"username":"test","password":"test123"}'
              expected_status: 200
            - action: "GET"
              url: "/api/v1/users/profile"
              headers:
                Authorization: "Bearer ${token}"
              expected_status: 200

  analyzer-config.yaml: |
    traffic_analysis:
      real_time:
        enabled: true
        window_size: "5m"
        metrics:
          - "request_rate"
          - "response_time"
          - "error_rate"
          - "geographic_distribution"
          
      prediction:
        enabled: true
        horizon: "30m"
        models:
          - type: "lstm"
            features: ["historical_traffic", "time_of_day", "day_of_week"]
          - type: "prophet"
            features: ["seasonal_patterns", "holidays", "events"]
            
      anomaly_detection:
        enabled: true
        threshold: 0.95
        algorithms: ["isolation_forest", "statistical"]
        
      optimization:
        enabled: true
        objectives:
          - "minimize_latency"
          - "maximize_availability"
          - "optimize_cost"
        constraints:
          - max_latency: 200  # ms
          - min_availability: 99.9  # percentage

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-config
  namespace: global-load-balancing
data:
  health-check-config.yaml: |
    health_monitoring:
      global_settings:
        check_interval: "30s"
        timeout: "10s"
        retries: 3
        parallel_checks: 10
        
      endpoints:
        api_primary:
          urls:
            - "https://api.itdo-erp.com/health"
            - "https://api-us-east-1.itdo-erp.com/health"
            - "https://api-us-west-2.itdo-erp.com/health"
            - "https://api-eu-west-1.itdo-erp.com/health"
            - "https://api-ap-southeast-1.itdo-erp.com/health"
          method: "GET"
          expected_status: [200, 204]
          timeout: "10s"
          
        api_database:
          urls:
            - "https://api.itdo-erp.com/health/database"
            - "https://api-us-east-1.itdo-erp.com/health/database"
          method: "GET"
          expected_status: 200
          timeout: "15s"
          expected_response_time: "5s"
          
      synthetic_checks:
        user_login_flow:
          frequency: "5m"
          steps:
            - name: "homepage"
              url: "https://app.itdo-erp.com"
              method: "GET"
              expected_status: 200
            - name: "login"
              url: "https://api.itdo-erp.com/api/v1/auth/login"
              method: "POST"
              body: '{"email":"test@itdo-erp.com","password":"test123"}'
              expected_status: 200
              extract_token: "$.token"
            - name: "profile"
              url: "https://api.itdo-erp.com/api/v1/users/profile"
              method: "GET"
              headers:
                Authorization: "Bearer ${token}"
              expected_status: 200
              
      alerting:
        channels:
          - type: "slack"
            webhook_url: "${SLACK_WEBHOOK_URL}"
            alert_threshold: 2  # failures
          - type: "pagerduty"
            integration_key: "${PAGERDUTY_INTEGRATION_KEY}"
            alert_threshold: 3  # failures

  endpoints.yaml: |
    endpoints:
      - name: "primary_api"
        region: "us_east_1"
        url: "https://api-us-east-1.itdo-erp.com"
        health_check_path: "/health"
        weight: 100
        capacity: 1000
        
      - name: "secondary_api"
        region: "us_west_2"
        url: "https://api-us-west-2.itdo-erp.com"
        health_check_path: "/health"
        weight: 80
        capacity: 800
        
      - name: "europe_api"
        region: "eu_west_1"
        url: "https://api-eu-west-1.itdo-erp.com"
        health_check_path: "/health"
        weight: 60
        capacity: 600
        
      - name: "asia_api"
        region: "ap_southeast_1"
        url: "https://api-ap-southeast-1.itdo-erp.com"
        health_check_path: "/health"
        weight: 40
        capacity: 400

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dns-management-config
  namespace: global-load-balancing
data:
  dns-config.yaml: |
    dns_management:
      providers:
        route53:
          enabled: true
          hosted_zone_id: "${ROUTE53_HOSTED_ZONE_ID}"
          region: "us-east-1"
          
        cloudflare:
          enabled: true
          zone_id: "${CLOUDFLARE_ZONE_ID}"
          
      records:
        api.itdo-erp.com:
          type: "A"
          routing_policy: "geolocation"
          health_check: true
          records:
            - value: "203.0.113.10"
              geolocation: "NA"  # North America
              health_check_id: "us_east_1_health"
            - value: "203.0.113.20"
              geolocation: "EU"  # Europe
              health_check_id: "eu_west_1_health"
            - value: "203.0.113.30"
              geolocation: "AS"  # Asia
              health_check_id: "ap_southeast_1_health"
              
        api-global.itdo-erp.com:
          type: "A"
          routing_policy: "latency"
          health_check: true
          records:
            - value: "203.0.113.10"
              region: "us-east-1"
              health_check_id: "us_east_1_health"
            - value: "203.0.113.11"
              region: "us-west-2"
              health_check_id: "us_west_2_health"
              
      health_checks:
        us_east_1_health:
          type: "HTTPS"
          resource_path: "/health"
          fqdn: "api-us-east-1.itdo-erp.com"
          port: 443
          interval: 30
          failure_threshold: 3
          
        eu_west_1_health:
          type: "HTTPS"
          resource_path: "/health"
          fqdn: "api-eu-west-1.itdo-erp.com"
          port: 443
          interval: 30
          failure_threshold: 3

  dns-providers.yaml: |
    providers:
      - name: "route53"
        type: "aws_route53"
        priority: 1
        configuration:
          credentials: "aws_credentials"
          default_ttl: 300
          health_check_enabled: true
          
      - name: "cloudflare"
        type: "cloudflare"
        priority: 2
        configuration:
          credentials: "cloudflare_credentials"
          default_ttl: 300
          proxy_enabled: true
          
      - name: "google_dns"
        type: "google_cloud_dns"
        priority: 3
        configuration:
          credentials: "gcp_credentials"
          default_ttl: 300

  dns-records.yaml: |
    dns_records_template:
      apex_domain:
        - name: "@"
          type: "A"
          values: ["203.0.113.10", "203.0.113.11"]
          ttl: 300
        - name: "@"
          type: "AAAA"
          values: ["2001:db8::10", "2001:db8::11"]
          ttl: 300
          
      api_subdomains:
        - name: "api"
          type: "CNAME"
          value: "api-global.itdo-erp.com"
          ttl: 300
        - name: "api-us-east-1"
          type: "A"
          value: "203.0.113.10"
          ttl: 60
        - name: "api-us-west-2"
          type: "A"
          value: "203.0.113.11"
          ttl: 60
          
      wildcard_records:
        - name: "*.edge"
          type: "CNAME"
          value: "edge-global.itdo-erp.com"
          ttl: 300

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: global-load-balancer-controller
  namespace: global-load-balancing
  labels:
    app.kubernetes.io/name: global-load-balancer-controller
spec:
  selector:
    app.kubernetes.io/name: global-load-balancer-controller
  ports:
  - name: http-api
    port: 8080
    targetPort: 8080
  - name: grpc-api
    port: 9090
    targetPort: 9090
  type: LoadBalancer
  loadBalancerSourceRanges:
  - "10.0.0.0/8"
  - "172.16.0.0/12"
  - "192.168.0.0/16"

---
apiVersion: v1
kind: Service
metadata:
  name: traffic-analytics-service
  namespace: global-load-balancing
spec:
  selector:
    app.kubernetes.io/name: traffic-analytics-service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: websocket
    port: 8081
    targetPort: 8081
  type: ClusterIP

---
# Service Accounts and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: global-load-balancer
  namespace: global-load-balancing
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/ITDOERPGlobalLoadBalancer

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: global-load-balancer
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: global-load-balancer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: global-load-balancer
subjects:
- kind: ServiceAccount
  name: global-load-balancer
  namespace: global-load-balancing

---
# Additional service accounts
apiVersion: v1
kind: ServiceAccount
metadata:
  name: global-health-checker
  namespace: global-load-balancing

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dns-manager
  namespace: global-load-balancing

---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: dns-credentials
  namespace: global-load-balancing
type: Opaque
data:
  hosted-zone-id: WjFEMzU2N1BKTjk4RlQ5
  cloudflare-zone-id: YWJjMTIzZGVmNDU2Z2hpNzg5

---
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: global-load-balancing
type: Opaque
data:
  access-key-id: WU9VUl9BV1NfQUNDRVNTX0tFWV9JRA==
  secret-access-key: WU9VUl9BV1NfU0VDUkVUX0FDQ0VTU19LRVk=

---
apiVersion: v1
kind: Secret
metadata:
  name: glb-tls-certificates
  namespace: global-load-balancing
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTi
  tls.key: LS0tLS1CRUdJTi

---
# Monitoring and Alerting Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: glb-monitoring-rules
  namespace: global-load-balancing
data:
  glb-alerts.yml: |
    groups:
    - name: global-load-balancer
      rules:
      - alert: GLBRegionDown
        expr: up{job="global-load-balancer"} == 0
        for: 2m
        labels:
          severity: critical
          component: global-load-balancer
        annotations:
          summary: "Global Load Balancer region {{ $labels.region }} is down"
          description: "GLB region {{ $labels.region }} has been down for more than 2 minutes"
          
      - alert: GLBHighLatency
        expr: glb_response_time_seconds{quantile="0.95"} > 0.5
        for: 5m
        labels:
          severity: warning
          component: global-load-balancer
        annotations:
          summary: "High latency detected in GLB"
          description: "95th percentile latency is {{ $value }}s for {{ $labels.region }}"
          
      - alert: GLBHealthCheckFailure
        expr: glb_health_check_success_rate < 0.95
        for: 1m
        labels:
          severity: critical
          component: health-check
        annotations:
          summary: "GLB health check failure rate high"
          description: "Health check success rate is {{ $value }} for {{ $labels.endpoint }}"