version: '3.8'

# ITDO ERP v2 - Production Infrastructure
# CC03 v59.0 - Practical Production Infrastructure

services:
  # NGINX Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: itdo-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - frontend
      - backend
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Backend API Server
  backend:
    build:
      context: ../
      dockerfile: backend/Dockerfile.prod
    image: itdo-erp-backend:latest
    container_name: itdo-backend-prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://itdo_user:${POSTGRES_PASSWORD}@postgres:5432/itdo_erp
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
    volumes:
      - backend_data:/app/data
      - backend_logs:/app/logs
    networks:
      - backend
      - database
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
      replicas: 2

  # Frontend Application
  frontend:
    build:
      context: ../
      dockerfile: frontend/Dockerfile.prod
    image: itdo-erp-frontend:latest
    container_name: itdo-frontend-prod
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${API_URL}/api/v1
      - REACT_APP_AUTH_URL=${AUTH_URL}
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - frontend_logs:/var/log/nginx
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: itdo-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=itdo_erp
      - POSTGRES_USER=itdo_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - database
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U itdo_user -d itdo_erp"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: itdo-redis-prod
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - database
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Keycloak Authentication
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: itdo-keycloak-prod
    restart: unless-stopped
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak_user
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - KC_HOSTNAME=${KEYCLOAK_HOSTNAME}
      - KC_PROXY=edge
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - frontend
      - database
    depends_on:
      postgres:
        condition: service_healthy
    command: start --optimized
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: itdo-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
      - backend
      - database
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.2.0
    container_name: itdo-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: itdo-alertmanager-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: itdo-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Backup Service
  backup:
    image: alpine:3.18
    container_name: itdo-backup-prod
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - postgres_backups:/backups/postgres
      - redis_backups:/backups/redis
      - app_backups:/backups/app
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - database
    depends_on:
      - postgres
      - redis
    command: crond -f -d 8
    entrypoint: |
      sh -c '
        apk add --no-cache postgresql-client redis aws-cli
        echo "$${BACKUP_SCHEDULE} /backup.sh" > /var/spool/cron/crontabs/root
        exec crond -f -d 8
      '
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# Networks
networks:
  frontend:
    driver: bridge
    name: itdo-frontend
  backend:
    driver: bridge
    name: itdo-backend
  database:
    driver: bridge
    name: itdo-database
    internal: true
  monitoring:
    driver: bridge
    name: itdo-monitoring

# Volumes
volumes:
  postgres_data:
    name: itdo-postgres-data
  postgres_backups:
    name: itdo-postgres-backups
  redis_data:
    name: itdo-redis-data
  redis_backups:
    name: itdo-redis-backups
  keycloak_data:
    name: itdo-keycloak-data
  backend_data:
    name: itdo-backend-data
  backend_logs:
    name: itdo-backend-logs
  frontend_logs:
    name: itdo-frontend-logs
  app_backups:
    name: itdo-app-backups
  nginx_cache:
    name: itdo-nginx-cache
  prometheus_data:
    name: itdo-prometheus-data
  grafana_data:
    name: itdo-grafana-data
  alertmanager_data:
    name: itdo-alertmanager-data