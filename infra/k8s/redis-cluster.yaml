# ITDO ERP v2 - Redis High Availability Cluster
# CC03 v48.0 Business-Aligned Infrastructure

# Redis Master
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-master
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/instance: master
spec:
  serviceName: redis-master-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/instance: master
    spec:
      securityContext:
        fsGroup: 1001
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server 
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 20Gi

---
# Redis Replica
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-replica
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/instance: replica
spec:
  serviceName: redis-replica-service
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: replica
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/instance: replica
    spec:
      securityContext:
        fsGroup: 1001
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        - --masterauth
        - $(REDIS_PASSWORD)
        - --replicaof
        - redis-master-service
        - "6379"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
        resources:
          requests:
            memory: "256Mi"
            cpu: "125m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "fast-ssd"
      resources:
        requests:
          storage: 20Gi

---
# Redis Sentinel for High Availability
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-sentinel
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis-sentinel
    app.kubernetes.io/component: sentinel
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-sentinel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-sentinel
        app.kubernetes.io/component: sentinel
    spec:
      containers:
      - name: redis-sentinel
        image: redis:7-alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 26379
          name: sentinel
        command:
        - redis-sentinel
        - /etc/redis/sentinel.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: REDIS_PASSWORD
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis/sentinel.conf
          subPath: sentinel.conf
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -p
            - "26379"
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: sentinel-config
        configMap:
          name: redis-sentinel-config

---
# Redis Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis
data:
  redis.conf: |
    # Redis Configuration for ITDO ERP Production
    
    # Network
    bind 0.0.0.0
    port 6379
    timeout 0
    tcp-keepalive 300
    
    # General
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # AOF
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    
    # Memory Management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Lazy freeing
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    
    # Security
    protected-mode yes
    
    # Clients
    maxclients 10000

---
# Redis Sentinel Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis-sentinel
data:
  sentinel.conf: |
    # Redis Sentinel Configuration for ITDO ERP
    
    port 26379
    sentinel monitor itdo-erp-redis redis-master-service 6379 2
    sentinel auth-pass itdo-erp-redis ${REDIS_PASSWORD}
    sentinel down-after-milliseconds itdo-erp-redis 5000
    sentinel parallel-syncs itdo-erp-redis 1
    sentinel failover-timeout itdo-erp-redis 10000
    sentinel announce-ip ${POD_IP}
    sentinel announce-port 26379

---
# Redis Master Service
apiVersion: v1
kind: Service
metadata:
  name: redis-master-service
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: master
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: master

---
# Redis Replica Service
apiVersion: v1
kind: Service
metadata:
  name: redis-replica-service
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: replica
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: replica

---
# Redis Cluster Service (Load Balancer)
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-service
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cluster
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: master

---
# Redis Sentinel Service
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel-service
  namespace: itdo-erp-data
  labels:
    app.kubernetes.io/name: redis-sentinel
spec:
  type: ClusterIP
  ports:
  - port: 26379
    targetPort: 26379
    name: sentinel
  selector:
    app.kubernetes.io/name: redis-sentinel