apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'itdo-erp-production'
        environment: 'production'
        version: 'v65.0'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
        scrape_interval: 30s
        metrics_path: /metrics
        
      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
        
      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
        
      # Kubernetes node cadvisor
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        metrics_path: /metrics/cadvisor
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
        
      # Kubernetes service endpoints
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name
            
      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
            
      # ITDO ERP Backend
      - job_name: 'itdo-erp-backend'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - itdo-erp
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
            action: keep
            regex: itdo-erp-backend
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_service_name
        scrape_interval: 10s
        metrics_path: /metrics
        
      # ITDO ERP Frontend
      - job_name: 'itdo-erp-frontend'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
                - itdo-erp
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
            action: keep
            regex: itdo-erp-frontend
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: http
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_service_name
        scrape_interval: 30s
        metrics_path: /metrics
        
      # PostgreSQL Exporter
      - job_name: 'postgresql'
        static_configs:
          - targets: ['postgresql-exporter:9187']
        scrape_interval: 30s
        
      # Redis Exporter
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter:9121']
        scrape_interval: 30s
        
      # NGINX Ingress Controller
      - job_name: 'nginx-ingress'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - ingress-nginx
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
            
      # Kubernetes State Metrics
      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics:8080']
        
      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            regex: 'node-exporter'
            action: keep
            
  # Alerting rules
  alerts.yml: |
    groups:
      - name: itdo-erp.rules
        rules:
          # Application Health Alerts
          - alert: ITDOERPBackendDown
            expr: up{job="itdo-erp-backend"} == 0
            for: 1m
            labels:
              severity: critical
              service: backend
            annotations:
              summary: "ITDO ERP Backend is down"
              description: "ITDO ERP Backend has been down for more than 1 minute."
              
          - alert: ITDOERPFrontendDown
            expr: up{job="itdo-erp-frontend"} == 0
            for: 2m
            labels:
              severity: critical
              service: frontend
            annotations:
              summary: "ITDO ERP Frontend is down"
              description: "ITDO ERP Frontend has been down for more than 2 minutes."
              
          # Performance Alerts
          - alert: HighResponseTime
            expr: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job="itdo-erp-backend"}[5m])) by (le)) > 2
            for: 5m
            labels:
              severity: warning
              service: backend
            annotations:
              summary: "High response time detected"
              description: "95th percentile response time is above 2 seconds for 5 minutes."
              
          - alert: HighErrorRate
            expr: sum(rate(http_requests_total{job="itdo-erp-backend",status=~"5.."}[5m])) / sum(rate(http_requests_total{job="itdo-erp-backend"}[5m])) > 0.05
            for: 2m
            labels:
              severity: critical
              service: backend
            annotations:
              summary: "High error rate detected"
              description: "Error rate is above 5% for 2 minutes."
              
          # Resource Alerts
          - alert: HighCPUUsage
            expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 80% for 5 minutes."
              
          - alert: HighMemoryUsage
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 85% for 5 minutes."
              
          - alert: HighDiskUsage
            expr: (1 - (node_filesystem_avail_bytes{fstype!="tmpfs"} / node_filesystem_size_bytes)) * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High disk usage detected"
              description: "Disk usage is above 85% for 5 minutes."
              
          # Database Alerts
          - alert: PostgreSQLDown
            expr: up{job="postgresql"} == 0
            for: 1m
            labels:
              severity: critical
              service: database
            annotations:
              summary: "PostgreSQL is down"
              description: "PostgreSQL database has been down for more than 1 minute."
              
          - alert: PostgreSQLHighConnections
            expr: pg_stat_database_numbackends / pg_settings_max_connections > 0.8
            for: 5m
            labels:
              severity: warning
              service: database
            annotations:
              summary: "PostgreSQL high connection usage"
              description: "PostgreSQL connection usage is above 80% for 5 minutes."
              
          # Cache Alerts
          - alert: RedisDown
            expr: up{job="redis"} == 0
            for: 1m
            labels:
              severity: critical
              service: cache
            annotations:
              summary: "Redis is down"
              description: "Redis cache has been down for more than 1 minute."
              
          - alert: RedisHighMemoryUsage
            expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
            for: 5m
            labels:
              severity: warning
              service: cache
            annotations:
              summary: "Redis high memory usage"
              description: "Redis memory usage is above 90% for 5 minutes."
              
          # Kubernetes Alerts
          - alert: KubernetesPodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
            for: 0m
            labels:
              severity: critical
            annotations:
              summary: "Kubernetes pod crash looping"
              description: "Pod {{ $labels.pod }} is crash looping."
              
          - alert: KubernetesPodNotReady
            expr: kube_pod_status_phase{phase=~"Pending|Unknown"} > 0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "Kubernetes pod not ready"
              description: "Pod {{ $labels.pod }} has been in a non-ready state for more than 5 minutes."
              
          - alert: KubernetesNodeNotReady
            expr: kube_node_status_condition{condition="Ready",status="true"} == 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "Kubernetes node not ready"
              description: "Node {{ $labels.node }} has been not ready for more than 5 minutes."